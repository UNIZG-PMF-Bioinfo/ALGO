---
title: "Week 1 - Lecture 1"

format:
  html:
    self-contained: true
    toc: true
    toc-depth: 5
    code-fold: false
    fig-align: center
    df-print: paged
    code-summary: "Show code"
    code-line-numbers: false
    code-tools: true
---

## Welcome to Algorithms & Programming!

-   homeworks + exam
-   Moodle forum
-   no copy-pasting, no group work
-   NO ChatGPT!!
-   student participation !!!

## R

-   toolbox for statistical analyses and data manipulation
-   advanced, flexible data formats
-   user-friendly
-   simple syntax
-   packages
-   community: documentation, stackOverflow, Github, Biostars...

### Google. Google. Google.

## Make your R usage easier

### Tips&Tricks

-   Ctrl+Enter to run code/send to console
-   tab for auto-complete
-   keyboard shortcuts listed in *Help*
-   History: send to console, up arrow
-   Help: search manually or from console (?, ??, example())
-   adjust defaults in Global options

## Make your R usage easier

### Rmarkdown (<https://rmarkdown.rstudio.com/>)

-   various outputs for sharing your work (.html, .pdf, Word, website...)
-   text + code chunks
-   `Ctrl+Alt+I` to insert new chunk
-   chunk options (message, warning, fig...)

## Make your R usage easier

### User interfaces

1.  RGui - useful when upgrading versions (package *installR*)
2.  RStudio - additional functionality, projects

## Basic components

-   variables\
-   functions\
-   environment

For starters, you can use R as a calculator:

```{r, results = "hold"}
3 + 5
10/2
4^2
8 %/% 3
8 %% 3
```

Some basic functions:

```{r, results = "hold"}
round(1.86)
sqrt(25)
log10(1000)
```

## Variables

-   everything is a vector\
-   assignment:
    -   **`<-`**
    -   `<<-`\
    -   `=`
    -   but don't touch the last two!!!
    -   `n <- 5`
-   create/collate: `c()`\
-   view: `print()` or type name

## Vectors

-   character, numeric (integer and double), logical
-   `class(), typeof()`
-   `as.x()` family of functions

Create your first variable:

```{r}
n <- 9
```

Let's see it:

```{r, results = "hold"}
n
print(n)
class(n)
```

As we said, every variable in R is a vector. So what does this mean?

Let's add one more number to our variable n using function c():

```{r, results = "hold"}
n <- c(n, 16); n
class(n)
```

How do functions work on this?

```{r}
sqrt(n)
```

What happens when we try to add a letter?

```{r, results = "hold"}
n <- c(n, "z"); n
class(n)
```

**Numeric vector:**

```{r, results = "hold"}
n1 <- c(1,2,4); n1
as.character(n1)
```

Create sequential numeric vector:

```{r}
n2 <- 1:10; n2
```

**Character vector:**

```{r, results = "hold"}
ch <- c("a", "b", "c", "d", "spanishinquisition"); ch
```

## Boolean variable

**TRUE FALSE**

It is a binary variable.

```{r}
bool <- c(T,F,T,T,F); bool
as.numeric(bool)
bin <- c(0,1,1,0,1); bin
class(bin)
as.logical(bin)
```

## Boolean operators

-   **AND** `&`
-   **OR** `|`
-   **NOT** `!`

```{r}
print(bool)
print(bin)
```

1.  **&** and **\|** are vectorised

2.  **&&** and **\|\|** are short-circuited

```{r, eval=FALSE}
bool & bin
bool && bin
```

```{r, eval=FALSE}
bool | bin
bool || bin
```

```{r, eval=FALSE}
!bool
!bool || bin
```

### Comparison operators

**==**

**!=**

**\>**

**\>=**

**\<**

**\<=**

```{r}
n2
n2 == 2
n2 > 5
n2 >= 5
```

### Comparison operators

```{r, results = "hold"}
bool
bin
```

```{r}
bool == bin
bool != bin
```

### RECYCLING

What happens when vectors are not the same length?

```{r}
n1; n2
n2*c(2,3)
```

```{r, results = "hold"}
n2*n1
n2 == n1
```

## Basic functions

`length()` : how many elements in a vector

```{r, results = "hold"}
myvec <- 1:20
length(myvec)
```

```{r, results = "hold"}
length("banana")
nchar("banana")
```

`which()` : returns positions of elements which satisfy the condition

```{r, results = "hold"}
which(n1 == 4)
which((myvec<=2) | (myvec>17))
```

## Basic functions

`names()` : gives names to the elements

```{r, results = "hold"}
names(ch) <- c("letter", "letter", "letter", "anotherletter", "nobodyexpected")
ch
```

`%in%` operator - are elements of the first vector present in the second vector?

```{r}
n2 %in% n1 
```

## Basic functions

`unique()` : returns unique elements

```{r, results = "hold"}
n3 <- c(0,0,0,0,1,1,1,2,2,2,2,2,3,3,3,3,5)
unique(n3)
```

`duplicated()` : logical: did the same element appear before in the vector?

```{r, results = "hold"}
duplicated(n3)
duplicated(c(5, n3))
```

`table()` : how many times does each unique element appear

```{r}
table(n3)
```

Get just the frequencies from table:

```{r, results = "hold"}
n3
as.numeric(table(n3))
```

Get unique elements using names - but be careful!

```{r, results = "hold"}
names(table(n3))
class(names(table(n3)))
```

### Taking a sample

`sample()` : take a sample from vector

```{r, results = "hold"}
sample(n3, 4)
sample(n3, 25, replace=TRUE)
```

Take a sample from some basic distributions:
![](normal_distribution.jpg)

```{r, results = "hold"}
sample(1:100, size = 10)
runif(10, min=1, max=100)
s <- rnorm(20, mean=3, sd=0.7); s
```

### Generating sequences

`seq()`

```{r, results = "hold"}
seq(from=1, to=100, by=2)
seq(from=0, to=10, length.out=21)
```

`rep()`

```{r, results = "hold"}
rep(1:3, times=4)
rep(1:3, each=4)
```

don't mix up `rep()` and `replicate()`!

```{r}
replicate(n = 10, expr = mean(sample(x = 1:10, size = 3)) )
```

### Basic statistics

```{r}
mean(s)
sd(s)
quantile(s)
```

## Vector subsetting \[\]

1.  **by position**
2.  by condition

One position:

```{r}
n1[3] 
```

Multiple positions:

```{r, results = "hold"}
n2[1:5]
ch[c(2,4,5)]
```

Everything except 1 position:

```{r}
n2[-7]
```

Positions stored in another vector:

```{r}
n2[n1]
```

## Vector subsetting \[\]

1.  by position
2.  **by condition**

```{r, results = "hold"}
n2
n2 > 5
n2[n2 > 5]
```

```{r, results = "hold"}
bin
n2[bin]
n2[as.logical(bin)]
```

#### Exercise 1

Create a vector myvec which contains all numbers from 1 to 20 except 3 and 6. Subset fifth and fourth number by position.

#### Exercise 2

Subset myvec to get only numbers smaller or equal to 2 or larger than 17. Return first the numbers, then their positions in the original vector.

Subset myvec to return only elements which are in positions divisible by 3.

#### Exercise 3

Return words from vector ch which have more than 5 letters.

## Data structures

```         
- vectors  
- factors = vectors with (unchangeable) levels  
- matrices = dataframes with 1 type of data  
- lists  
- data frames = pretty lists  
```

## Factors

Vectors with predefined levels.\
Usual suspects for your errors.

```{r}
fac <- factor(n3); fac
```

```{r, results = "hold"}
fac[1] <- 6
fac
```

So how to turn a factor into normal numeric vector? There's a hack.

```{r, results = "hold"}
as.numeric(fac)
as.numeric(as.character(fac))
```

## Matrices

```{r}
m <- matrix(1:15, nrow=5, ncol=3); m
```

Subsetting:

```{r, results = "hold"}
m[1,3]
m[12]
m[,2]
```

Basic functions:

```{r, results = "hold"}
t(m)      # transpose
diag(m)   # extract diagonal
dim(m)    # see dimensions
```

#### Exercise 4

Make a 4x4 matrix m2 with numbers from 1 to 16. Let the first row be: 1 2 3 4 (hint: consult help with ?matrix).

Change all the numbers on the diagonal to zeroes.

Sum the elements in each row.

## Lists

Store anything; most flexible data type.

```{r}
l <- list(n2, bool, m, fac); l
```

## Lists

Let's name the entries:

```{r}
names(l) <- c("vector1", "vector2", "matrix1", "factor1")
```

How many entries?

```{r}
length(l)
```

How about dimensions?

```{r}
dim(l)
```

### List subsetting

By position:

```{r, results = "hold"}
l[2]
class(l[2])
```

By position, another way:

```{r, results = "hold"}
l[[4]]
class(l[[4]])
```

By name:

```{r, results = "hold"}
l$vector2
class(l$vector2)
l[["factor1"]]
```

Subset an element of an element:

```{r}
unlist(l[2])
class(unlist(l[2]))

l[3]
l[[3]][2,3]
#l[3][2,3]

```

## Data frames

"Matrices" with different types of data.

```{r}
df <- data.frame(m, ch); df
dim(df)
ncol(df); nrow(df)
colnames(df); rownames(df)
```

### Data frame subsetting

By position:

```{r, results = "hold"}
df[2, 3]
df[, 3:4]
```

By names:

```{r, results = "hold"}
df["ch"]
df$ch
class(df["ch"])
class(df$ch)
```

Internally, data frames are lists with entries of equal lengths.

## Data frames

Adding a column:

```{r}
df <- cbind(df, bool); df
```

Removing a column:

```{r}
df["bool"] <- NULL; df
```

Removing a row:

```{r}
#df[5, ] <- NULL; df

df <- df[-5, ]
```

#### Exercise 5

R has a number of pre-loaded datasets, `iris` probably being the most famous one.

Load iris and calculate mean length of sepal.
