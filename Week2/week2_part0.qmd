---
title: "R packages"
author: 
  - name: "dr.sc. Paula Å tancl"
    affiliation: "Bioinformatis group"
format:
  html:
    self-contained: true
    toc: true
    toc-depth: 5
    code-fold: false
    fig-align: center
    df-print: paged
    code-summary: "Show code"
    code-line-numbers: false
    code-tools: true
execute:
  echo: true
  warning: false
  message: false
---

## Install a package

### CRAN

CRAN is the **official repository** for R packages. It hosts thousands of stable, peer-reviewed R packages that have passed strict checks for quality and compatibility.

```{r, eval=FALSE}
#Install from CRAN as follow:
install.packages("magrittr")
install.packages("dplyr")
install.packages("ggplot2") 
```

### Github

GitHub is a **platform for code sharing and collaboration**, widely used by developers. Many R package authors share their **development versions** on GitHub---these might include the newest features or bug fixes that haven't yet been submitted to CRAN.

```{r, eval=FALSE}
#Or, install the latest version from GitHub as follow:
# Install
if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/ggpubr")
```

### Bioconductor

Bioconductor is a **specialized repository** for packages focused on **bioinformatics, genomics, and computational biology**. It includes tools for analyzing DNA/RNA sequencing, gene expression, and other biological data.

```{r, eval=FALSE}
## Bioconductor
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("airway")
```

## Load the packages

When you **install a package** in R (using `install.packages()` or similar), you're downloading it and saving it to your computer. This only needs to be done **once** (per R environment).

However, to **use** the functions or data from a package in your current R session, you must **load** the package with `library()` or `require()`.

```{r, eval=FALSE}
library("magrittr")
library("data.table")
library("ggpubr")
```

### Pipes ( **%\>%** )

Package magrittr provides a new "pipe"-like operator, **`%>%`**. The pipe operator allows you to pipe a value forward into a function. For example you can write **`vec %>% sum`** instead of **`sum(vec)`** . It makes your code more intuitive to read and write especially when "pipping/chaining" multiple arguments.

```{r, eval=FALSE}
sample(x = 1:1000, size = 40) %>% 
   # Call function sum on the whole vector
```

# **Tidyverse style guide**

[Tidyverse style guide](https://style.tidyverse.org/) provides conventions for writing clean, consistent, and readable R code across tidyverse packages.

It covers:

-   **Syntax & formatting:** indentation, spacing, and line length

-   **Naming conventions:** use of `snake_case` for variables and functions

-   **Function style:** argument formatting and clarity

-   **Code structure:** clear organization and consistent use of pipes

-   **Comments & documentation:** readable and informative comments

-   **ggplot2 style:** consistent layout and indentation for layered plots
