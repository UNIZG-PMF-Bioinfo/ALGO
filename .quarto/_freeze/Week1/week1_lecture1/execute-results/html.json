{
  "hash": "8731af6736e8acb75b65a04ac42ef3b8",
  "result": {
    "markdown": "---\ntitle: \"Week 1 - Lecture 1\"\n\nformat:\n  html:\n    self-contained: true\n    toc: true\n    toc-depth: 5\n    code-fold: false\n    fig-align: center\n    df-print: paged\n    code-summary: \"Show code\"\n    code-line-numbers: false\n    code-tools: true\n---\n\n\n## Welcome to Algorithms & Programming!\n\n-   homeworks + exam\n-   Moodle forum\n-   no copy-pasting, no group work\n-   NO ChatGPT!!\n-   student participation !!!\n\n## R\n\n-   toolbox for statistical analyses and data manipulation\n-   advanced, flexible data formats\n-   user-friendly\n-   simple syntax\n-   packages\n-   community: documentation, stackOverflow, Github, Biostars...\n\n### Google. Google. Google.\n\n## Make your R usage easier\n\n### Tips&Tricks\n\n-   Ctrl+Enter to run code/send to console\n-   tab for auto-complete\n-   keyboard shortcuts listed in *Help*\n-   History: send to console, up arrow\n-   Help: search manually or from console (?, ??, example())\n-   adjust defaults in Global options\n\n## Make your R usage easier\n\n### Rmarkdown (<https://rmarkdown.rstudio.com/>)\n\n-   various outputs for sharing your work (.html, .pdf, Word, website...)\n-   text + code chunks\n-   `Ctrl+Alt+I` to insert new chunk\n-   chunk options (message, warning, fig...)\n\n## Make your R usage easier\n\n### User interfaces\n\n1.  RGui - useful when upgrading versions (package *installR*)\n2.  RStudio - additional functionality, projects\n\n## Basic components\n\n-   variables\\\n-   functions\\\n-   environment\n\nFor starters, you can use R as a calculator:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 + 5\n10/2\n4^2\n8 %/% 3\n8 %% 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n[1] 5\n[1] 16\n[1] 2\n[1] 2\n```\n:::\n:::\n\n\nSome basic functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(1.86)\nsqrt(25)\nlog10(1000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n[1] 5\n[1] 3\n```\n:::\n:::\n\n\n## Variables\n\n-   everything is a vector\\\n-   assignment:\n    -   **`<-`**\n    -   `<<-`\\\n    -   `=`\n    -   but don't touch the last two!!!\n    -   `n <- 5`\n-   create/collate: `c()`\\\n-   view: `print()` or type name\n\n## Vectors\n\n-   character, numeric (integer and double), logical\n-   `class(), typeof()`\n-   `as.x()` family of functions\n\nCreate your first variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 9\n```\n:::\n\n\nLet's see it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn\nprint(n)\nclass(n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n[1] 9\n[1] \"numeric\"\n```\n:::\n:::\n\n\nAs we said, every variable in R is a vector. So what does this mean?\n\nLet's add one more number to our variable n using function c():\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- c(n, 16); n\nclass(n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  9 16\n[1] \"numeric\"\n```\n:::\n:::\n\n\nHow do functions work on this?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 4\n```\n:::\n:::\n\n\nWhat happens when we try to add a letter?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- c(n, \"z\"); n\nclass(n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"9\"  \"16\" \"z\" \n[1] \"character\"\n```\n:::\n:::\n\n\n**Numeric vector:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn1 <- c(1,2,4); n1\nas.character(n1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 4\n[1] \"1\" \"2\" \"4\"\n```\n:::\n:::\n\n\nCreate sequential numeric vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn2 <- 1:10; n2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\n**Character vector:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nch <- c(\"a\", \"b\", \"c\", \"d\", \"spanishinquisition\"); ch\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\"                  \"b\"                  \"c\"                 \n[4] \"d\"                  \"spanishinquisition\"\n```\n:::\n:::\n\n\n## Boolean variable\n\n**TRUE FALSE**\n\nIt is a binary variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbool <- c(T,F,T,T,F); bool\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\nas.numeric(bool)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 0 1 1 0\n```\n:::\n\n```{.r .cell-code}\nbin <- c(0,1,1,0,1); bin\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1 1 0 1\n```\n:::\n\n```{.r .cell-code}\nclass(bin)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nas.logical(bin)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE  TRUE FALSE  TRUE\n```\n:::\n:::\n\n\n## Boolean operators\n\n-   **AND** `&`\n-   **OR** `|`\n-   **NOT** `!`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(bool)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\nprint(bin)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1 1 0 1\n```\n:::\n:::\n\n\n1.  **&** and **\\|** are vectorised\n\n2.  **&&** and **\\|\\|** are short-circuited\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbool & bin\nbool && bin\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbool | bin\nbool || bin\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n!bool\n!bool || bin\n```\n:::\n\n\n### Comparison operators\n\n**==**\n\n**!=**\n\n**\\>**\n\n**\\>=**\n\n**\\<**\n\n**\\<=**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\nn2 == 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nn2 > 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n```\n:::\n\n```{.r .cell-code}\nn2 >= 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n```\n:::\n:::\n\n\n### Comparison operators\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbool\nbin\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n[1] 0 1 1 0 1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbool == bin\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE  TRUE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nbool != bin\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE  TRUE  TRUE\n```\n:::\n:::\n\n\n### RECYCLING\n\nWhat happens when vectors are not the same length?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn1; n2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 4\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\nn2*c(2,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  2  6  6 12 10 18 14 24 18 30\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn2*n1\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in n2 * n1: longer object length is not a multiple of shorter object\nlength\n```\n:::\n\n```{.r .cell-code}\nn2 == n1\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in n2 == n1: longer object length is not a multiple of shorter object\nlength\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  4 12  4 10 24  7 16 36 10\n [1]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n:::\n:::\n\n\n## Basic functions\n\n`length()` : how many elements in a vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyvec <- 1:20\nlength(myvec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(\"banana\")\nnchar(\"banana\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 6\n```\n:::\n:::\n\n\n`which()` : returns positions of elements which satisfy the condition\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich(n1 == 4)\nwhich((myvec<=2) | (myvec>17))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n[1]  1  2 18 19 20\n```\n:::\n:::\n\n\n## Basic functions\n\n`names()` : gives names to the elements\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(ch) <- c(\"letter\", \"letter\", \"letter\", \"anotherletter\", \"nobodyexpected\")\nch\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              letter               letter               letter \n                 \"a\"                  \"b\"                  \"c\" \n       anotherletter       nobodyexpected \n                 \"d\" \"spanishinquisition\" \n```\n:::\n:::\n\n\n`%in%` operator - are elements of the first vector present in the second vector?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn2 %in% n1 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  TRUE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n:::\n:::\n\n\n## Basic functions\n\n`unique()` : returns unique elements\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn3 <- c(0,0,0,0,1,1,1,2,2,2,2,2,3,3,3,3,5)\nunique(n3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1 2 3 5\n```\n:::\n:::\n\n\n`duplicated()` : logical: did the same element appear before in the vector?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicated(n3)\nduplicated(c(5, n3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n[13] FALSE  TRUE  TRUE  TRUE FALSE\n [1] FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE\n[13]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n```\n:::\n:::\n\n\n`table()` : how many times does each unique element appear\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(n3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nn3\n0 1 2 3 5 \n4 3 5 4 1 \n```\n:::\n:::\n\n\nGet just the frequencies from table:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn3\nas.numeric(table(n3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0 0 0 0 1 1 1 2 2 2 2 2 3 3 3 3 5\n[1] 4 3 5 4 1\n```\n:::\n:::\n\n\nGet unique elements using names - but be careful!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(table(n3))\nclass(names(table(n3)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0\" \"1\" \"2\" \"3\" \"5\"\n[1] \"character\"\n```\n:::\n:::\n\n\n### Taking a sample\n\n`sample()` : take a sample from vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(n3, 4)\nsample(n3, 25, replace=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 0 3 3\n [1] 3 3 3 1 0 2 0 3 2 3 1 3 2 0 0 2 2 1 2 3 2 3 0 2 0\n```\n:::\n:::\n\n\nTake a sample from some basic distributions: ![](normal_distribution.jpg)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(1:100, size = 10)\nrunif(10, min=1, max=100)\ns <- rnorm(20, mean=3, sd=0.7); s\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 45 83 89 33 66 31 98 26 55 19\n [1] 23.56083 69.53790 58.71966 88.54394 88.51569 70.68793 10.25291 41.74534\n [9] 62.34062 88.28662\n [1] 3.444413 2.942270 3.851027 2.358462 3.064138 3.237489 2.683880 1.739286\n [9] 2.197564 4.292811 2.510376 4.183473 3.366691 2.836766 2.758526 2.349132\n[17] 2.326590 4.273511 3.524788 4.252435\n```\n:::\n:::\n\n\n### Generating sequences\n\n`seq()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from=1, to=100, by=2)\nseq(from=0, to=10, length.out=21)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49\n[26] 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99\n [1]  0.0  0.5  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0\n[16]  7.5  8.0  8.5  9.0  9.5 10.0\n```\n:::\n:::\n\n\n`rep()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(1:3, times=4)\nrep(1:3, each=4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 2 3 1 2 3 1 2 3 1 2 3\n [1] 1 1 1 1 2 2 2 2 3 3 3 3\n```\n:::\n:::\n\n\ndon't mix up `rep()` and `replicate()`!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreplicate(n = 10, expr = mean(sample(x = 1:10, size = 3)) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 3.666667 4.333333 2.666667 6.666667 7.333333 7.000000 5.333333 5.666667\n [9] 5.666667 8.000000\n```\n:::\n:::\n\n\n### Basic statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.109681\n```\n:::\n\n```{.r .cell-code}\nsd(s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7733678\n```\n:::\n\n```{.r .cell-code}\nquantile(s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      0%      25%      50%      75%     100% \n1.739286 2.472397 3.003204 3.606348 4.292811 \n```\n:::\n:::\n\n\n## Vector subsetting \\[\\]\n\n1.  **by position**\n2.  by condition\n\nOne position:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn1[3] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\nMultiple positions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn2[1:5]\nch[c(2,4,5)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n              letter        anotherletter       nobodyexpected \n                 \"b\"                  \"d\" \"spanishinquisition\" \n```\n:::\n:::\n\n\nEverything except 1 position:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn2[-7]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  2  3  4  5  6  8  9 10\n```\n:::\n:::\n\n\nPositions stored in another vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn2[n1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 4\n```\n:::\n:::\n\n\n## Vector subsetting \\[\\]\n\n1.  by position\n2.  **by condition**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn2\nn2 > 5\nn2[n2 > 5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n[1]  6  7  8  9 10\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbin\nn2[bin]\nn2[as.logical(bin)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1 1 0 1\n[1] 1 1 1\n[1]  2  3  5  7  8 10\n```\n:::\n:::\n\n\n#### Exercise 1\n\nCreate a vector myvec which contains all numbers from 1 to 20 except 3 and 6. Subset fifth and fourth number by position.\n\n#### Exercise 2\n\nSubset myvec to get only numbers smaller or equal to 2 or larger than 17. Return first the numbers, then their positions in the original vector.\n\nSubset myvec to return only elements which are in positions divisible by 3.\n\n#### Exercise 3\n\nReturn words from vector ch which have more than 5 letters.\n\n## Data structures\n\n```         \n- vectors  \n- factors = vectors with (unchangeable) levels  \n- matrices = dataframes with 1 type of data  \n- lists  \n- data frames = pretty lists  \n```\n\n## Factors\n\nVectors with predefined levels.\\\nUsual suspects for your errors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfac <- factor(n3); fac\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0 0 0 0 1 1 1 2 2 2 2 2 3 3 3 3 5\nLevels: 0 1 2 3 5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfac[1] <- 6\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in `[<-.factor`(`*tmp*`, 1, value = 6): invalid factor level, NA\ngenerated\n```\n:::\n\n```{.r .cell-code}\nfac\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] <NA> 0    0    0    1    1    1    2    2    2    2    2    3    3    3   \n[16] 3    5   \nLevels: 0 1 2 3 5\n```\n:::\n:::\n\n\nSo how to turn a factor into normal numeric vector? There's a hack.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(fac)\nas.numeric(as.character(fac))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] NA  1  1  1  2  2  2  3  3  3  3  3  4  4  4  4  5\n [1] NA  0  0  0  1  1  1  2  2  2  2  2  3  3  3  3  5\n```\n:::\n:::\n\n\n## Matrices\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- matrix(1:15, nrow=5, ncol=3); m\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    6   11\n[2,]    2    7   12\n[3,]    3    8   13\n[4,]    4    9   14\n[5,]    5   10   15\n```\n:::\n:::\n\n\nSubsetting:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm[1,3]\nm[12]\nm[,2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11\n[1] 12\n[1]  6  7  8  9 10\n```\n:::\n:::\n\n\nBasic functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt(m)      # transpose\ndiag(m)   # extract diagonal\ndim(m)    # see dimensions\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    6    7    8    9   10\n[3,]   11   12   13   14   15\n[1]  1  7 13\n[1] 5 3\n```\n:::\n:::\n\n\n#### Exercise 4\n\nMake a 4x4 matrix m2 with numbers from 1 to 16. Let the first row be: 1 2 3 4 (hint: consult help with ?matrix).\n\nChange all the numbers on the diagonal to zeroes.\n\nSum the elements in each row.\n\n## Lists\n\nStore anything; most flexible data type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- list(n2, bool, m, fac); l\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n [1]  1  2  3  4  5  6  7  8  9 10\n\n[[2]]\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n\n[[3]]\n     [,1] [,2] [,3]\n[1,]    1    6   11\n[2,]    2    7   12\n[3,]    3    8   13\n[4,]    4    9   14\n[5,]    5   10   15\n\n[[4]]\n [1] <NA> 0    0    0    1    1    1    2    2    2    2    2    3    3    3   \n[16] 3    5   \nLevels: 0 1 2 3 5\n```\n:::\n:::\n\n\n## Lists\n\nLet's name the entries:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(l) <- c(\"vector1\", \"vector2\", \"matrix1\", \"factor1\")\n```\n:::\n\n\nHow many entries?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(l)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\nHow about dimensions?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(l)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\n### List subsetting\n\nBy position:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl[2]\nclass(l[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$vector2\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n\n[1] \"list\"\n```\n:::\n:::\n\n\nBy position, another way:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl[[4]]\nclass(l[[4]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] <NA> 0    0    0    1    1    1    2    2    2    2    2    3    3    3   \n[16] 3    5   \nLevels: 0 1 2 3 5\n[1] \"factor\"\n```\n:::\n:::\n\n\nBy name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl$vector2\nclass(l$vector2)\nl[[\"factor1\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n[1] \"logical\"\n [1] <NA> 0    0    0    1    1    1    2    2    2    2    2    3    3    3   \n[16] 3    5   \nLevels: 0 1 2 3 5\n```\n:::\n:::\n\n\nSubset an element of an element:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunlist(l[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nvector21 vector22 vector23 vector24 vector25 \n    TRUE    FALSE     TRUE     TRUE    FALSE \n```\n:::\n\n```{.r .cell-code}\nclass(unlist(l[2]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nl[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$matrix1\n     [,1] [,2] [,3]\n[1,]    1    6   11\n[2,]    2    7   12\n[3,]    3    8   13\n[4,]    4    9   14\n[5,]    5   10   15\n```\n:::\n\n```{.r .cell-code}\nl[[3]][2,3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\n#l[3][2,3]\n```\n:::\n\n\n## Data frames\n\n\"Matrices\" with different types of data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(m, ch); df\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"X1\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"X2\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"X3\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"ch\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"6\",\"3\":\"11\",\"4\":\"a\"},{\"1\":\"2\",\"2\":\"7\",\"3\":\"12\",\"4\":\"b\"},{\"1\":\"3\",\"2\":\"8\",\"3\":\"13\",\"4\":\"c\"},{\"1\":\"4\",\"2\":\"9\",\"3\":\"14\",\"4\":\"d\"},{\"1\":\"5\",\"2\":\"10\",\"3\":\"15\",\"4\":\"spanishinquisition\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\ndim(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 4\n```\n:::\n\n```{.r .cell-code}\nncol(df); nrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\ncolnames(df); rownames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"X1\" \"X2\" \"X3\" \"ch\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\" \"2\" \"3\" \"4\" \"5\"\n```\n:::\n:::\n\n\n### Data frame subsetting\n\nBy position:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf[2, 3]\ndf[, 3:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"X3\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"ch\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"11\",\"2\":\"a\"},{\"1\":\"12\",\"2\":\"b\"},{\"1\":\"13\",\"2\":\"c\"},{\"1\":\"14\",\"2\":\"d\"},{\"1\":\"15\",\"2\":\"spanishinquisition\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nBy names:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf[\"ch\"]\ndf$ch\nclass(df[\"ch\"])\nclass(df$ch)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"ch\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"a\"},{\"1\":\"b\"},{\"1\":\"c\"},{\"1\":\"d\"},{\"1\":\"spanishinquisition\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\"                  \"b\"                  \"c\"                 \n[4] \"d\"                  \"spanishinquisition\"\n[1] \"data.frame\"\n[1] \"character\"\n```\n:::\n:::\n\n\nInternally, data frames are lists with entries of equal lengths.\n\n## Data frames\n\nAdding a column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- cbind(df, bool); df\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"X1\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"X2\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"X3\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"ch\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"bool\"],\"name\":[5],\"type\":[\"lgl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"6\",\"3\":\"11\",\"4\":\"a\",\"5\":\"TRUE\"},{\"1\":\"2\",\"2\":\"7\",\"3\":\"12\",\"4\":\"b\",\"5\":\"FALSE\"},{\"1\":\"3\",\"2\":\"8\",\"3\":\"13\",\"4\":\"c\",\"5\":\"TRUE\"},{\"1\":\"4\",\"2\":\"9\",\"3\":\"14\",\"4\":\"d\",\"5\":\"TRUE\"},{\"1\":\"5\",\"2\":\"10\",\"3\":\"15\",\"4\":\"spanishinquisition\",\"5\":\"FALSE\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nRemoving a column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf[\"bool\"] <- NULL; df\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"X1\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"X2\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"X3\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"ch\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"6\",\"3\":\"11\",\"4\":\"a\"},{\"1\":\"2\",\"2\":\"7\",\"3\":\"12\",\"4\":\"b\"},{\"1\":\"3\",\"2\":\"8\",\"3\":\"13\",\"4\":\"c\"},{\"1\":\"4\",\"2\":\"9\",\"3\":\"14\",\"4\":\"d\"},{\"1\":\"5\",\"2\":\"10\",\"3\":\"15\",\"4\":\"spanishinquisition\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nRemoving a row:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#df[5, ] <- NULL; df\n\ndf <- df[-5, ]\n```\n:::\n\n\n#### Exercise 5\n\nR has a number of pre-loaded datasets, `iris` probably being the most famous one.\n\nLoad iris and calculate mean length of sepal.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}