---
title: "Homework 2"
author:
date: "`r format(Sys.time(), '%d.%m.%Y')`"
output: html_notebook
---


# Instructions and RULES:
+ Perform all of the analysis using only data.table. 
+ It is allowed to use functions that are present in base R (DO NOT forget them as you may need to search them and use them in this homework).
+ All the solutions which use for loops will not be graded. Use the functions from the apply family!
+ If certain task contains detailed instructions how to solve something, then those instructions must be followed or these tasks will not be graded.
+ Whenever you are asked to show a certain value or values as an answer and if it is not precisely stated in which format should the answer be (data.table or a vector) then both answers are correct.
+ Manual calculations and writing the answers directly on the code chunk will not be taken into consideration without the proper coding steps (and/or saved variable) that confirm this answer.


```{r}
library(data.table)
```

# Task 1. Analysis of dataset *flights*

Read in the flights data in flights variable from   "https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv". (Install curl package if you need to before doing this.)

```{r, message=FALSE}
library(data.table)
( flights <- fread("https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv") )
```

a1) Order the flights data table by carrier (ascenting order) then by decreasing distance, and save only hour as a vector in a variable var1a1. (1 point)

a2) Order the flights data table by carrier (ascenting order) then by decreasing distance, and save only hour as a data table with one column in a variable var1a2. (1 point)

b1) Find the max flight air time for each carrier. copy the result to variable var1b1 (data.table with 2 columns, carrier and maxairtime, sorted by carrier. Do this in one command, no chaining, don't change the original data.table.). (1 point)  

b2) Find the max flight air time for each carrier. copy the result to variable var1b2 (data.table with 2 columns, carrier and maxairtime, sorted by maxairtime, from largest to smallest. Don't change the original data.table.). (1 point)  

c1) Count the number of flights that flew maximum air time for each carrier. Copy the data.table with carrier and numberofmaxflights to var1c1. Do this in one command, no addition of new columns and no chaining=2 points.  

c2) Then do this by addition of new column to flights and/or chaining in one command = 1 point save the result to var1c2 (copy!). If you add the column, remove it in the end of this exercise (end of c2 just remove the column/s if added from flights).  

d1) Count how many flights had the same flight time for each carrier separately, ordered by carrier alphabetically and by decreasing flight time (carrier, air_time, N). copy the result to var1d1. Do this in one command, no chaining. (1 point)

d2) Get the data.table containing the same as previous (carrier, air_time, N), but only for the longest 2 flights for each carrier! copy the result to var1d2. Do this in one command, chaining if needed. (1 point)  

d3) Get the data.table containing the same as previous (carrier, air_time, N), but only for the longest and shortest flights for each carrier! copy the result to var1d3. Do this in one command, chaining if needed. (1 point)  

e) Get the name of the carrier who has the largest difference between longest and shortest flight air time! copy the result to var1e (only the carrier name as an element of vector). Do this in one command, chaining if needed, do not change the original data.table! (3 points)  

f) Get the name of the carrier who has the largest mean air time. One command, chaining allowed, don't change the original data.table. Save the name alone in variable var1f (still the same command.). (1 point)  

g1) Write a function that will calculate the squared sum of differences between each element and the mean value of all elements, call the function myRss. The function should take one vector as an argument and return numeric value. Use this function to calculate the value for air time for each carrier, name the column rss, dont change the original table! one command, no chaining. (copy to var1g1, 2 points).  

g2) Do as the previous but for air_time and arr_delay columns in the same command, no chaining, no change to original data.table (var1g2, 1 point)!   

g3) Do as the previous but for all numeric columns in the same command, no chaining, no change to original data.table (var1g3, 2 points)!   

h1) Assign a new column to flights: speed which will have speed calculated for each flight. Do it in a data.table fashion. copy the resulting flights data.table to myFlights1 variable. (1 point)  

h2) Convert speed and distance variables to type double. do it in data.table fashion, in one command. copy the resulting data.table to myFlights2 variable. Do this withouth lapply. (1 point). 

h3) Again do the RSS calculation as in var1g1 but for all double columns in the same command, no chaining, no change to original data.table (var1g4, 1 point)!   

i) Save the names of the columns which are of type double to thosecolumns variable.(1 point)

j) Convert thosecolumns back to type integer. do it in data.table fashion, in one command.  copy the resulting data.table to myFlights3 variable. But now do this with lapply.(2 points).

k) For air_time column, calculate the difference between the second and first observation for each carrier, in flights data frame ordered by carrier and then by decreasing air_time. In the same command, no chaining, no change to original data.table, no additional function defined outside (var1k, 2 points)!

l) For all integer columns, calculate the difference between the second and first observation for each carrier. In the same command, no chaining, no change to original data.table, no additional function defined outside (var1l, 2 points)!

m) Copy the flights to myFlights. Add a new column, rss_air_time which will have myRss of air_time saved in it, to myFlights. do not change the flights variable, dont use chaining, do it in one command, (myFlights assignment is separate command.) copy the result to variable myFlights1m. (1 point)

n) Make a vector with all the names of the columns with integer values, save it in intnames variable. Use the **paste** function to make a vector which will have all the names of integer columns converted to rss_columnname (so for air_time it will be rss_air_time, dor hour it will be rss_hour, ...) (2 points) (No need to do this with data table). save the vector as rssnames variable.

o) Use the previously created vectors to add multiple new columns to data.table. The names of the columns you will add will be rssnames. And the values will of course be myRss(column), where column is every column from intnames. Do it in one command, data.table style, no chaining. Copy the result to myFlights3 variable. (2 points).

p)  Are flights longer depending on time of the day? (Divide the day into : night (from 22->6 hours), morning (6->12, afternoon 12->16, evening 16->22 )). (2 points)


# Task 2. COVID-19 set analysis (10 pts)

In this exercise, you will explore the **COVID-19 Worldwide Dataset** using R. 

a) Install package COVID19 at https://covid19datahub.io/.  Select the The COVID-19 Worldwide Vaccine Dataset from the package and convert to data.table.

b) How many countries are represented in the dataset?

c) Which province and country have the highest total number of recovered patients?

d) Which province and country have the highest number of recovered patients in a day?

e) For countries that report by province (e.g., Canada, China, Australia), calculate what percentage of national cases each province contributes. Which province contributed the most relative to its national total?

f) For each country, compute the daily growth rate of confirmed cases (difference relative to the previous day using `shift` function). Which 5 countries had the highest peak growth rates?

g)  What does `rleid()` return if you apply it to a simple vector? Try a small example of your own and look at the output.  How could you apply `rleid()` to the COVID-19 dataset to label runs of the same `type` (`confirmed`, `death`, `recovered`) for Beijing, China?  

# Task 3. Analysis of dataset of your choise (8 pts)

In this task, you will document your search for a dataset that contains **non-communicable disease (NCD)** and/or **age-related patient information**.  

The types of NCD datasets you may consider include either **disease status** per patient along other measured features:

1. **Cancers**:  
   - lung, ovarian, primary biliary cirrhosis, brain, liver, breast  
2. **Heart disease**  
3. **Diabetes**  
4. Other age-related chronic diseases (if you find a suitable dataset)


a) Install the R package that contains the dataset you want to analyse.

b) Answer the following questions about your dataset

  - How many patients or samples are included?
  
  - Do any of them have missing values?
  
  - How many numerical and how many categorical features/characteristics are measured for each patient?
  
  - Based on your dataset, and the feature you deem most severe for the disease, which patient/sample has the highest value and which has the lowest?

c) Make at least 2 to maximum of 4 **meaningful analysis** of your choice that fits the dataset you selected, using the R methods you have learned so far. 
