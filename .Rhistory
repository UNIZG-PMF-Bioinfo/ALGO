dt1 <- mtcars_dt[5:25,.(id=carnames, mpg, cyl)]
dt2 <- mtcars_dt[1:10, .(carnames, gear)]
dt1
dt2
#
merge(dt1, dt2, by="carnames")
dt1
dt2
dt1
dt2
#
merge(dt1, dt2, by.x="id", by.y="carnames")
#
merge(dt1, dt2, by.x="id", by.y="carnames")
mtcars_dt
dt1
setnames(dt1, "id", "carnames")
dt1
dcast(dt1, carnames ~ cyl, value.var = "mpg")
dcast(dt1, carnames ~ cyl, value.var = "mpg", fill = 0)
region_enhancer <- data.table(chr = c("chr1", "chr11", "chr17", "chr17"),
start=c(100, 108300000, 9200, 4390100),
end= c(900, 108301500, 9900, 4391000) )
location_gene <- data.table( gene = c("BRCA1", "ATM"),
chr = c("chr17", "chr11"),
start = c(43902857, 108230374),
end= c(43983996, 108376593)
)
region_enhancer; location_gene
# First we set the values
setkey(region_enhancer, chr, start, end)
setkey(location_gene, chr, start, end)
### Then we use foverlaps
foverlaps(region_enhancer, location_gene)
foverlaps(location_gene, region_enhancer)
### Then we use foverlaps
foverlaps(region_enhancer, location_gene)
3/4
mtcars_dt[]
bla <- as.data.table(bla)
library(data.table)
bla <- as.data.table(bla)
bla <- as.data.table(iris)
bla
bla[Petal.Length < 2 & Petal.Length >1,.N, Species]
head(table(bla$Species[bla$Sepal.Length > 0 & bla$Petal.Width < 10]))
head(table(bla[bla$Sepal.Length > 0 & bla$Petal.Width < 10, grp]))
head(table(bla[Sepal.Length > 0 & Petal.Width < 10, grp]))
bla[Sepal.Length > 0 & Petal.Width < 10, grp]
head(table(bla[Sepal.Length > 0 & Petal.Width < 10, Species]))
bla[,tapply(.SD,sum),.SDcols=c("Petal.Length")]
bla[sort(Petal.Length)]
bla[order(Petal.Length)]
bla[sort(Petal.Length)] %>% head()
library(magrittr)
bla[sort(Petal.Length)] %>% head()
bla[order(Petal.Length)] %>% head()
as.numeric(c("A", "B", "C"))
bla[,.(A=5, B=4)]
library(data.table)
students <- data.table(
Student = c("Alice", "Bob", "Charlie", "Diana", "Ethan"),
Math    = c("A", "B", "A", "C", "B"),
Science = c("B", "A", "B", "A", "C"),
English = c("A", "B", "C", "A", "B")
)
students
students[,ifelse(.SD=="A", .SD := 5,
ifelse(.SD == "B", .SD := 4,
.SD :=3
)
), Student]
bla[,as.numeric(Sepal.Length, Sepal.Width)]
library(tidyverse)
library(data.table)
library(gt)
## First specify the packages of interest
packages <- c("gt", "data.table",  "tidyverse")
## Install if missing, then load
lapply(packages, function(x) {
if (!requireNamespace(x, quietly = TRUE)) {
install.packages(x)
}
library(x, character.only = TRUE)
})
install.packages(x)
unloadNamespace('rlang')
install.packages('rlang')
## First specify the packages of interest
packages <- c("gt", "data.table",  "tidyverse")
## Install if missing, then load
lapply(packages, function(x) {
if (!requireNamespace(x, quietly = TRUE)) {
install.packages(x)
}
library(x, character.only = TRUE)
})
install.packages(x)
detach("package:rlang", unload = TRUE)
detach("package:rlang", unload = TRUE)
install.packages("rlang")
## First specify the packages of interest
packages <- c("gt", "data.table",  "tidyverse")
## Install if missing, then load
lapply(packages, function(x) {
if (!requireNamespace(x, quietly = TRUE)) {
install.packages(x)
}
library(x, character.only = TRUE)
})
install.packages(x)
install.packages("rlang", dependencies = TRUE)
## First specify the packages of interest
packages <- c("gt", "data.table",  "tidyverse")
## Install if missing, then load
lapply(packages, function(x) {
if (!requireNamespace(x, quietly = TRUE)) {
install.packages(x)
}
library(x, character.only = TRUE)
})
install.packages(x)
install.pacages("dplyr")
install.pakcages("dplyr")
install.packages("dplyr")
## First specify the packages of interest
packages <- c("gt", "data.table",  "tidyverse")
## Install if missing, then load
lapply(packages, function(x) {
if (!requireNamespace(x, quietly = TRUE)) {
install.packages(x)
}
library(x, character.only = TRUE)
})
messy_qpcr
table1_wide = dcast(as.data.table(table1), country ~ year, value.var = c("cases", "population"))
gt(table1_wide)
set.seed(42)
# ---- 1. Simulate MESSY qPCR data (wide format) ----
messy_qpcr <- data.table(
Sample = c("ctrl_1", "ctrl_2", "ctrl3", "treat1", "treat_2", "treat_3"),
Target_CT_Rep1 = c(22.1, 23.0, "22_low", 18.5, 19.3, 18.9),
Target_CT_Rep2 = c(22.3, "missing", 21.9, 18.4, 19.5, 19.0),
Ref_CT_Rep1 = c(20.0, "20.2", "19.8", 18.0, 17.7, "err"),
Ref_CT_Rep2 = c("19.9", 20.1, 19.9, 18.1, "error", 17.8),
Condition_Time = c("Control_24h", "Control_24h", "Control_24h", "Treatment_24", "Treatment_24h", "Treatment_24h")
)
gt(messy_qpcr, caption="Messy wide-format data")
messy_qpcr
names(messy_qpcr)[grepl("CT", names(messy_qpcr))]
messy_qpcr
messy_qpcr
not_numeric_CT <- names(messy_qpcr[,.SD,.SDcols=patterns("CT")])
not_numeric_CT
not_numeric_CT <- names(messy_qpcr[,.SD,.SDcols=patterns("CT")])
messy_qpcr[, (not_numeric_CT) := lapply(.SD, function(x) {
x <- gsub("_low", "", x)                    # remove "_low"
x[x %in% c("missing", "error", "err")] <- NA  # replace text errors with NA
as.numeric(x)                               # convert to numeric
})]
not_numeric_CT
messy_qpcr[, (not_numeric_CT) := lapply(.SD, function(x) {
x <- gsub("_low", "", x)                    # remove "_low"
x[x %in% c("missing", "error", "err")] <- NA  # replace text errors with NA
as.numeric(x)                               # convert to numeric
}),
.SDcols = not_numeric_CT
]
messy_qpcr
library(coronavirus)
covid_dt <- as.data.table(coronavirus::coronavirus)
library(data.table)
covid_dt <- as.data.table(coronavirus::coronavirus)
covid_dt
covid_dt[,uniqueN(country)]
covid_dt
covid_dt[type == "recovered", sum(cases), .(country, province)]
covid_dt
covid_dt[,.N, type]
covid_dt[type == "recovery", sum(cases), .(country, province)]
covid_dt[type == "recovery", sum(cases), .(country, province)][V1 == max(V1)]
covid_dt[type == "recovery", sum(cases), .(country, province)][!is.na(provinence)][V1 == max(V1)]
covid_dt[type == "recovery", sum(cases), .(country, province)][!is.na(province)][V1 == max(V1)]
covid_dt[cases == max(cases),.(country, province)]
covid_dt[cases == max(cases),.(country, province, cases)]
covid_dt[cases == max(cases) & !is.na(province),.(country, province, cases)]
covid_dt[cases == max(cases) & !is.na(province),.(country, province, cases)]
covid_dt[!is.na(province][cases == max(cases) ,.(country, province, cases)]
covid_dt[!is.na(province][cases == max(cases) ,.(country, province, cases)]
covid_dt[!is.na(province)][cases == max(cases) ,.(country, province, cases)]
covid_dt[cases == max(cases),.(country, province, cases)]
covid_dt[!is.na(province)][cases == max(cases) ,.(country, province, cases)]
covid_dt[type == "recovery", sum(cases), .(country, province)][V1 == max(V1)]
# if I want provinence (+1)
covid_dt[type == "recovery", sum(cases), .(country, province)][!is.na(province)][V1 == max(V1)]
covid_dt[cases == max(cases),.(country, province, cases)]
covid_dt[!is.na(province)][cases == max(cases) ,.(country, province, cases)]
covid_dt[cases == max(cases),.(country, province, cases)]
covid_dt[!is.na(province)][cases == max(cases) ,.(country, province, cases)]
covid_dt[!is.na(province)]
covid_dt
covid_dt[!is.na(province), .N, province]
covid_dt
covid_dt[!is.na(province), sum(cases), province] %>%
.][]
covid_dt[!is.na(province), sum(cases), province] %>%
.[]
library(magrittr)
covid_dt[!is.na(province), sum(cases), province] %>%
.[]
covid_dt
covid_dt[!is.na(province), .(sum(cases), population), province]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(V1/population), province]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(V1/population*100), province]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(round(V1/population*100, 2)), province]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(round(V1/population*100, 2), population), province]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(round(V1/population*100, 2), population), province] %>%
.[order(population)]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(round(V1/population*100, 2), population), province] %>%
.[order(-population)]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(round(V1/population*100, 2), population), province] %>%
.[order(-V1)]
covid_dt
covid_dt[type == "confirmed", .(cases - shift(cases)) , country]
covid_dt
covid_dt[type == "confirmed", .(cases - shift(cases)) , country]
covid_dt
covid_dt[type == "confirmed", .(cases - shift(cases)) , country] %>%
.[is.na(V1)]
covid_dt[type == "confirmed", .(cases - shift(cases)) , country]
covid_dt[type == "confirmed", .(cases - shift(cases)) , country] %>%
.[order(-V1)]
covid_dt[type == "confirmed", .(cases - shift(cases)) , country] %>%
.[order(-V1), .SD[1:5], country]
covid_dt[type == "confirmed", .(cases - shift(cases)) , country] %>%
.[order(-V1), country]
covid_dt[type == "confirmed", .(cases - shift(cases)) , country] %>%
.[order(-V1)]
covid_dt[type == "confirmed", .(cases - shift(cases)) , country] %>%
.[order(-V1)] %>%
.[1:5]
covid_dt[type == "confirmed", .( max(cases - shift(cases), na.rm = TRUE)) , country] %>%
.[order(-V1)] %>%
.[1:5]
covid_dt[type == "confirmed", .( max(cases - shift(cases), na.rm = TRUE)) , country]
covid_dt
covid_dt
covid_dt[country == "China" & province == "Beijing"]
covid_dt[country == "China" & province == "Beijing"] %>%
.[,.SD[1:2],type]
covid_dt[country == "China" & province == "Beijing"] %>%
.[order(date),.SD[1:2],type]
covid_dt[country == "China" & province == "Beijing"] %>%
.[order(-date),.SD[1:2],type]
covid_dt[country == "China" & province == "Beijing"] %>%
.[order(date),.SD[1:2],type]
covid_dt[country == "China" & province == "Beijing"] %>%
.[order(date)]
covid_dt[country == "China" & province == "Beijing"] %>%
.[order(date)] %>%
.[cases != 0]
covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
# Clean the 'type' names if needed (factor -> character)
long_cn[, type := c("confirmed","deaths","recovered")[as.integer(type)]]
covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
.[]
covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
.[order(date)]
covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
.[order(date)] %>% #just in case the table is in same order
.[, .(consec_id := rleid(type))] %>%
.[,.(consec_id, type, cases)]
covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
.[order(date)] %>% #just in case the table is in same order
.[, consec_id := rleid(type)] %>%
.[,.(consec_id, type, cases)]
covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
.[order(date)] %>% #just in case the table is in same order
.[, consec_id := rleid(type)] %>%
.[,.(consec_id, type, cases)] %>%
.[,.N,.(consec_id)] %>%
.[N==max(N)]
covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
.[order(date)] %>% #just in case the table is in same order
.[, consec_id := rleid(type)] %>%
.[,.(consec_id, type, cases)] %>%
.[,.N,.(consec_id)] %>%
.[N==max(N),]
covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
.[order(date)] %>% #just in case the table is in same order
.[, consec_id := rleid(type)] %>%
.[,.(consec_id, type, cases)] %>%
.[,.N,.(consec_id)]
covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
.[order(date)] %>% #just in case the table is in same order
.[, consec_id := rleid(type)] %>%
.[,.(consec_id, type, cases)] %>%
.[,.N,.(consec_id)] %>%
.[N==max(N)]
dt_g <- covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
.[order(date)] %>% #just in case the table is in same order
.[, consec_id := rleid(type)]
dt_g %>%
.[,.(consec_id, type, cases)] %>%
.[,.N,.(consec_id)] %>%
.[N==max(N)]
dt_g %>%
.[,.N,.(consec_id)] %>%
.[N==max(N)]
dt_g[consec_id=="252"]
covid_dt[cases == max(cases),.(country, province, cases)]
covid_dt[type == "recovery", sum(cases), .(country, province)][V1 == max(V1)]
# if I want provinence (+1)
covid_dt[type == "recovery", sum(cases), .(country, province)][!is.na(province)][V1 == max(V1)]
covid_dt[type == "recovery", sum(cases), .(country, province)][V1 == max(V1)]
# if I want provinence (+1)
covid_dt[type == "recovery", sum(cases), .(country, province)][!is.na(province)][V1 == max(V1)]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(round(V1/population*100, 2), population), province] %>%
.[order(-V1)]
covid_dt
covid_dt
covid_dt
# if I want provinence (+1)
covid_dt[type == "recovery", sum(cases), .(country, province)][!is.na(province)][V1 == max(V1)]
covid_dt[type == "recovery", sum(cases), .(country, province)][V1 == max(V1)]
# if I want provinence (+1)
covid_dt[type == "recovery", sum(cases), .(country, province)][!is.na(province)][V1 == max(V1)]
covid_dt[!is.na(province), .(sum(cases), population), province]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique()
# by total population
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(round(V1/population*100, 2), population), province] %>%
.[order(-V1)]
covid_dt[type == "confirmed", .( max(cases - shift(cases), na.rm = TRUE)) , country] %>%
.[order(-V1)] %>%
.[1:5]
covid_dt[!is.na(province)][cases == max(cases) ,.(country, province, cases)]
covid_dt[cases == max(cases),.(country, province, cases)]
covid_dt[cases=="recovered"][cases == max(cases),.(country, province, cases)]
covid_dt[cases=="recovered"]
covid_dt[cases=="recovory"][cases == max(cases),.(country, province, cases)]
covid_dt
recovered[,.N,type]
covid_dt[,.N,type]
covid_dt[cases=="recovery "][cases == max(cases),.(country, province, cases)]
covid_dt[cases=="recovery"][cases == max(cases),.(country, province, cases)]
covid_dt[cases=="recovery"]
covid_dt[type=="recovery"][cases == max(cases),.(country, province, cases)]
# by total population
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(round(V1/population*100, 2), population), province] %>%
.[order(-V1)]
covid_dt[type=="recovery"][cases == max(cases),.(country, province, cases)]
covid_dt[type=="recovery"][!is.na(province)][cases == max(cases) ,.(country, province, cases)]
covid_dt[type=="recovery"][cases == max(cases),.(country, province, cases)]
covid_dt[type=="recovery"][!is.na(province)][cases == max(cases) ,.(country, province, cases)]
# Example data
dt_grade <- data.table(
Student = c("Alice", "Bob", "Cara"),
Math = c("A", "A", "B"),
Science = c("C", "A", "B"),
English = c("C", "C", "B")
)
library(data.table)
##
change_grade <- function(x) {
if (x == "A") {
x <- 5
} else if (x == "B") {
x <- 4
} else{
x <- 3
}
return(as.numeric(x))
}
dt_grade
# Example data
dt_grade <- data.table(
Student = c("Alice", "Bob", "Cara"),
Math = c("A", "A", "B"),
Science = c("C", "A", "B"),
English = c("C", "C", "B")
)
##
change_grade <- function(x) {
if (x == "A") {
x <- 5
} else if (x == "B") {
x <- 4
} else{
x <- 3
}
return(as.numeric(x))
}
dt_grade
dt_grade[,lapply(.SD, change_grade), .SDcols=c("Math", "Science", "English")]
change_grade <- function(x) {
if (x == "A") {
x <- 5
} else if (x == "B") {
x <- 4
} else{
x <- 3
}
return(as.numeric(x))
}
dt_grade[,lapply(.SD, change_grade), .SDcols=c("Math", "Science", "English")]
dt_grade[,lapply(.SD, change_grade), .SDcols=grade_cols]
change_grade
dt_grade[, lapply(.SD, function(col) sapply(col, change_grade)), .SDcols = grade_cols]
grade_cols <- c("Math","Science","English")
dt_grade[,lapply(.SD, change_grade), .SDcols=grade_cols]
dt_grade[, lapply(.SD, function(col) sapply(col, change_grade)), .SDcols = grade_cols]
dt_grade[,lapply(.SD, as.numeric), .SDcols=grade_cols]
change_grade(dt_grade$Math)
dt_grade$Math
change_grade <- function(x) {
new_vec <- ifelse(x == "A", 5,
ifelse(x== "B", 4),
3
)
return(as.numeric(new_vec))
}
grade_cols <- c("Math","Science","English")
dt_grade[,lapply(.SD, change_grade), .SDcols=grade_cols]
change_grade <- function(x) {
new_vec <- ifelse(x == "A", 5,
ifelse(x == "B", 4,
ifelse(x == "C", 3, NA)))
as.numeric(new_vec)
}
grade_cols <- c("Math","Science","English")
dt_grade[,lapply(.SD, change_grade), .SDcols=grade_cols]
change_grade <- function(x) {
new_vec <- ifelse(x == "A", 5,
ifelse(x == "B", 4,
3))
as.numeric(new_vec)
}
grade_cols <- c("Math","Science","English")
dt_grade[, lapply(.SD, change_grade), .SDcols=grade_cols]
if (!requireNamespace("GEOquery", quietly = TRUE))
install.packages("GEOquery")
library(GEOquery)
# Download metadata (GSE130970)
gse <- getGEO("GSE130970", GSEMatrix = TRUE)
# Extract phenotype / sample metadata
pheno <- pData(gse[[1]])
# View metadata
head(pheno)
pheno
library(data.table)
setDT(pheno)
pheno
str(pheno)
View(pheno)
pheno[,.(characteristics_ch1.2)]
library(stringr)
pheno[,":="(age = str_extract(characteristics_ch1.2, "\\d+"))]
pheno
pheno$`age at biopsy:ch1` %>%
summary()
pheno[,":="(age = str_extract(characteristics_ch1.2, "\\d+") %>% as.numeric)]
pheno$age %>%
summary()
pheno$age %>%
summary()
library(ggplot2)
ggplot(pheno, aes(x=age)) +
geom_histogram()
library(GEOquery)
library(DESeq2)
gse <- getGEO("GSE130970", GSEMatrix=TRUE)[[1]]
expr <- exprs(gse)
meta <- pData(gse)
# Clean covariates
meta$stage <- factor(meta$fibrosis_stage, ordered=TRUE)
meta
meta$stage
colnames(meta)
