# nonchilled, uvjet je gdje je treatment nonchilled
nonchilleduvjet <- var7i$Treatment=="nonchilled"
var7i[nonchilleduvjet,"diffFromMeanUptake"] <- var7i[nonchilleduvjet,"uptake"] - meannonchilled
# chilled, uvjet je gdje je treatment chilled
chilleduvjet <- var7i$Treatment=="chilled"
var7i[chilleduvjet,"diffFromMeanUptake"] <- var7i[chilleduvjet, "uptake"] - meanchilled
var7i
var7i
4+4+3+17+7
4+4+3+8+7+16
4+4+3+8+7+16+1
flights
library(data.table)
( flights <- fread("https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv") )
iris_dt <- as.data.table(iris)
iris_dt[, .(row_id=.I), by=Species][c(1,51,101)]
iris_dt[, .(row_id=.GRP), by=Species][c(1,51,101)]
iris_dt[,.(row_di = 1:.N), Species]
iris_dt[,.(row_di = 1:.N), Species][c(1,51,101)]
iris_dt[,.(row_di = 1:.N), Species][c(1,51:52,101)]
iris_dt[,.(row_di = 1:.N), Species][,.SD[1], Species]
iris_dt[,.(row_di = 1:.N), Species][,.SD[1:2], Species]
iris_dt[, c("sepal_length_diff", "mean_diff") := {
mean_sepal_length <- mean(Sepal.Length)
diff_from_avg <- Sepal.Length - mean_sepal_length
list(round(diff_from_avg, 1), mean(diff_from_avg))
}, by = Species]
iris_dt
?seq_len
getwd()
# Write the solution here
iris_dt[Sepal.Length < 6.7 & Petal.Length < 1.2]
iris_dt <- as.data.table(iris)
library(data.table)
iris_dt <- as.data.table(iris)
# Write the solution here
iris_dt[Sepal.Length < 6.7 & Petal.Length < 1.2]
# Write the solution here
iris_dt[Species == "setosa" & Petal.Width > 0.3, ]
# Write the solution here
iris_dt[1:3, ]
# Write the solution here
iris_dt[1:3, c(3,4)]
iris_dt[1:3, .(Petal.Length, Petal.Width)]
iris_dt[1:3, c("Petal.Length", "Petal.Width")]
# samo jedan stupac
iris_dt[1:3, Petal.Length]
iris_dt[1:3]$Petal.Length
# stupac u data.table formatu
iris_dt[1:3, .(Petal.Length)]
iris_dt[Sepal.Width == 3 , .(Species, Sepal.Width) ]
vec_sel <- c("Species", "Sepal.Width")
iris_dt[Sepal.Width == 3 , ..vec_sel ]
iris_dt[Sepal.Length < 6.7]
iris_dt[Sepal.Length < 6.7][, mean(Petal.Width)]
# Write the solution here
iris_dt[Sepal.Length < 6.7, mean(Petal.Width)]
iris_dt[Sepal.Length < 6.7][Species=="virginica"][ mean(Petal.Width)]
iris_dt[Sepal.Length < 6.7][Species=="virginica"][,lapply(.SD, mean)]
iris_dt[Sepal.Length < 6.7][Species=="virginica"][ mean(Petal.Width)]
iris_dt[Sepal.Length < 6.7][Species=="virginica"][,lapply(.SD, mean)]
iris_dt[Sepal.Length < 6.7][Species=="virginica"][ mean(Petal.Width)]
# Write the solution here
iris_dt[, ":=" (meanPW = mean(Petal.Width),
sdPW = sd(Petal.Width)
),
Species
]
iris_dt
iris_dt
# Write the solution here
iris_dt[, uniqueN(meanPW)]
iris_dt[, uniqueN(meanPW), Species]
# Write the solution here
iris_dt[, uniqueN(meanPW)]
iris_dt[, uniqueN(meanPW), Species]
###
iris_dt[,.(.I), by=Species][c(1,51,101)]
iris_dt[, .(row_id = 1:.N),  Species][c(1,51,101)]
iris_dt[, .(row_id = 1:.N),  Species][c(1:2,51:52,101)]
iris_dt[, 1:.N]
iris_dt[, 1:.N, Species]
iris_dt[, .(1:.N), Species]
iris_dt[ Petal.Length < 6.5,  ":=" (
n_obs = .N,
row_id = .I,
grp_id = .GRP
), Species]
iris_dt
# Write the solution here
na.omit(iris_dt)
# Write the solution here
iris_dt_noNA <- na.omit(iris_dt)
iris_dt_noNA
## is.na()
iris_dt[is.na(row_id)]
## is.na()
iris_dt[!is.na(row_id)]
iris_dt[Species == "virginica"]
iris_dt[Species == "virginica", Species := "new_virginica"]
iris_dt[Species == "virginica"]
iris_dt[Species == "new_virginica"]
iris_dt[order(Petal.Width, decreasing = FALSE)]
iris_dt[order(Petal.Width, decreasing = FALSE),
.SD[1:3]
, by=Species]
, by=Species][, .(mean(Species),
, by=Species][, .(mean(Species),
iris_dt[order(Petal.Width, decreasing = FALSE),
.SD[1:3], by=Species][, .(mean(Species),
mean(Sepal.Length),
mean(Sepal.Width)
)]
iris_dt[order(Petal.Width, decreasing = FALSE),
.SD[1:3],
by=Species][, .(mean(Species),
mean(Sepal.Length),
mean(Sepal.Width)
)]
iris_dt[order(Petal.Width, decreasing = FALSE),
.SD[1:3],
by=Species][, lapply(.SD, mean),.SDcols=1:3]
# Write the solution here
iris_dt[order(Petal.Width, decreasing = FALSE),
.SD[1:3],
by=Species][, lapply(.SD, mean),.SDcols=is.numeric]
library("COVID19")
x <- covid19()
x
x[,.SD,.SDcols=patterns("[Cc]ountr")]
x[,.SD,.SDcols=patterns("ountr")]
x[,.SD,.SDcols=patterns("countr")]
setDT(x)
library(data.table)
setDT(x)
x[,.SD,.SDcols=patterns("countr")]
x
x <- covid19(country = c("Italy", "US"), level = 3)
x
x <- covid19()
setDT(x)
x
x[grepl("Bejing",key_apple_mobility)]
x[, c("id","country","province","date",
grep("vaccin|vaccine|people_vaccin|total_vaccin|daily_vaccin",
names(vax), ignore.case = TRUE, value = TRUE)),
with = FALSE]
x[, c("id","country","province","date",
grep("vaccin|vaccine|people_vaccin|total_vaccin|daily_vaccin",
names(x), ignore.case = TRUE, value = TRUE)),
with = FALSE]
x
str(x)
x
x[,uniqueN(iso_currency)]
x
ctry <- x[administrative_area_level == 1 & !is.na(iso_alpha_3)]
sub  <- x[administrative_area_level %in% 2:3]
ctry
pick a province/region name column that’s present at the most granular level available
uniqueN(ctry$administrative_area_level_1)
x[,uniqueN(iso_currency)]
x[,.(iso_currency, administrative_area_level_1)]
top_total_recovered <- sub[order(administrative_area_level_1, province, date),
tail(.SD, 1), by = .(administrative_area_level_1, province)
][order(-recovered)][1,
.(country  = administrative_area_level_1,
province, date, recovered)]
x
x
grepl("China", x$key_local, value=TRUE)
grep("China", x$key_local, value=TRUE)
library(‘coronavirus’)
library(coronavirus)
install.packages("‘coronavirus’")
install.packages("coronavirus")
coronavirus::coronavirus
coronavirus::coronavirus %>% head()
coronavirus::coronavirus
coronavirus::covid19_vaccine
coronavirus::covid19_vaccine
coronavirus::coronavirus
coronavirus::coronavirus[,uniqueN(country)]
covid_dt <- as.data.table(coronavirus::coronavirus)
covid_dt[,uniqueN(country)]
covid_dt
covid_dt[,.N,type]
covid_dt
covid_dt[,type == "recovery",.N,.(country, province)]
covid_dt[type == "recovery",.N,.(country, province)]
covid_dt[type == "recovery",.N,.(country, province)] %>%
.[order(-N)]
covid_dt[type == "recovery",.N,.(country, province)][order(-N)]
covid_dt
covid_dt[type == "recovery",sum(cases),.(country, province)][order(-N)]
covid_dt[type == "recovery",sum(cases),.(country, province)]
covid_dt[type == "recovery",sum(cases),.(country, province)][order(-V1)]
covid_dt
?coronavirus::coronavirus
covid_dt
## First specify the packages of interest
packages <- c("png", "grid",  "magrittr",
"data.table", "knitr", "readr", "readxl")
## Install if missing, then load
lapply(packages, function(x) {
if (!requireNamespace(x, quietly = TRUE)) {
install.packages(x)
}
library(x, character.only = TRUE)
})
do.call("sum", list(a=1:10, b=2:12))
lapply(list(a=1:10, b=2:12), sum)
do.call("sum", list(a=1:10, b=2:12))
lapply(list(a=1:10, b=2:12), sum)
do.call("sum", list(a=1:10, b=2:12))
lapply(list(a=1:10, b=2:12), sum)
55+72
do.call("sum", list(a=1:10, b=2:12))
lapply(list(a=1:10, b=2:12), sum)
sum(c(1:10, 2:12))
do.call("sum", list(a=1:10, b=2:12))
lapply(list(a=1:10, b=2:12), sum)
55+77
?tapply
head(sort(tapply(iris$Petal.Length, iris$Species, sum), decreasing = TRUE))
?tapply
head(sort(tapply(iris$Species, iris$Petal.Length, sum), decreasing = TRUE))
iris[,sum("Petal.Length"), by=S]
setDT(iris)
bla <- as.data.table(iris)
bla
head(sort(tapply(iris$Species, iris$Petal.Length, sum), decreasing = TRUE))
head(sort(tapply(iris$Petal.Length, iris$Species, sum), decreasing = TRUE))
bla[,sum(Petal.Length), Species][order(V1)][1:6]
bla[, .I[which.min(get(Species))], by = Species]
bla
bla[, row_id = .I]
bla[, row_id := .I]
bla
tb1
co2_dt <- as.data.table(CO2)
co2_dt[,.(mean(uptake)),.Treatment]
co2_dt[,.(mean(uptake)),Treatment]
co2_dt[, smalluptake := uptake/3]
co2_dt[smalluptake %in% c(3.1,4.1)]
co2_dt[, smalluptake := as.numeric(as.character(uptake)/3]
co2_dt[, smalluptake := as.numeric(as.character(uptake))/3]
co2_dt[smalluptake %in% c(3.1,4.1)]
co2_dt
co2_dt[order(smalluptake)]
co2_dt[smalluptake %in% c(3.1,4.1)]
co2_dt[, smalluptake := as.numeric(as.character(uptake))/3]
co2_dt
co2_dt[smalluptake %in% c(3.1,4.1)]
co2_dt[smalluptake == 3.1]
co2_dt[smalluptake == 4.1]
CO2$smalluptake <- as.numeric(as.character(CO2$uptake/3))
nrow(CO2[CO2$smalluptake=="3.1" | CO2$smalluptake=="4.1",])
co2_dt[smalluptake == "3.1" | smalluptake == "4.1"]
co2_dt[smalluptake == 3.1 | smalluptake == 4.1]
co2_dt[, smalluptake := as.integer(as.character(uptake))/3]
co2_dt[smalluptake == 3.1 | smalluptake == 4.1]
co2_dt
co2_dt[smalluptake == "3.1" | smalluptake == "4.1"]
CO2$smalluptake <- as.numeric(as.character(CO2$uptake/3))
co2_dt[, smalluptake := as.numeric(as.character(uptake))/3]
co2_dt[smalluptake == "3.1" | smalluptake == "4.1"]
co2_dt[smalluptake %in% c(3.1, 4.1)]
co2_dt[, diffFromMeanUptake := {}]
co2_dt[, diffFromMeanUptake := { mean_plant = mean(uptake), uptake - mean_plant}, Treatment]
co2_dt[, diffFromMeanUptake := {
mean_plant = mean(uptake)
uptake - mean_plant
}, Treatment]
co2_dt
co2_dt[smalluptake == "3.1" | smalluptake == "4.1"]
co2_dt[smalluptake == 3.1 | smalluptake == 4.1]
co2_dt[mean(conc)]
co2_dt[mean(conc, na.rm=TRUE)]
co2_dt[mean(uptake, na.rm=TRUE)]
co2_dt[mean(uptake, na.rm=TRUE)]
co2_dt[,lapply(.SD, mean)]
co2_dt[, row_id := .I]
cor_dt[row_id == 23 ]
co2_dt[row_id == 23 ]
co2_dt[row_id == 23.8 ]
co2_dt[row_id == 24 ]
co2_dt[row_id == mean(uptake, na.rm=TRUE)]
co2_dt[, row_id := .I]; co2_dt[row_id == as.integer(mean(uptake, na.rm=TRUE))]
co2_dt[mean(uptake, na.rm = TRUE)]
temp <- list.files(path = "test_data/",
pattern="*.csv",
full.names = TRUE)
myfiles <- lapply(temp, fread)
temp
myfiles %>%
.[1:2]
do.call(rbind, myfiles)
do.call(sum, list(1:10))
rbindlist(myfiles)
tb1 <- data.table(sampleID = c(6:1),
cancer = c("Breast","Breast","Brain","Liver","Brain","Pancreas"))
tb2 <- data.table(sampleID = c(7, 4, 6, 2, 8),
gender = c("F","F","M","F","M"))
head(tb1,3)
head(tb2,3)
rbind(tb1, tb2)
rbind(tb1, tb2, fill=TRUE)
cbind(tb1, tb2)
merge(tb1, tb2, by="sampleID") #if setkey was used prior then merge(tb1,tb2) works the same
merge(tb1, tb2, by="sampleID", all=TRUE)
merge(tb1, tb2, by="sampleID", all.x = TRUE)
merge(tb1, tb2, by="sampleID", all.y = TRUE)
setkey(tb1, sampleID)
setkey(tb2, sampleID)
head(tb1, 3)
head(tb2,3)
setkey(tb1, sampleID)
setkey(tb2, sampleID)
tb1[tb2]
tb2[tb1]
setkey(tb1, sampleID)
setkey(tb2, sampleID)
tb1[tb2]
tb2[tb1]
data.table("JOIN type" = c("INNER", "LEFT OUTER", "RIGHT OUTER", "FULL OUTER"),
"DT syntax" = c("X[Y, nomatch=0]", "Y[X]", "X[Y]", "-"),
"merge() syntax" = c("merge(X, Y, all=FALSE)", "merge(X, Y, all.x=TRUE)",
"merge(X, Y, all.y=TRUE)", "merge(X, Y, all=TRUE)"))
dt_cancer <- merge(tb1, tb2, by="sampleID", all=TRUE)
dt_cancer
names(dt_cancer)[1] <- "id"
dt_cancer
dt_cancer[,.(gender, sampleID)]
names(dt_cancer)
setnames(dt_cancer,  "id", "sampleID", skip_absent = TRUE)
names(dt_cancer)
dt_cancer[,.(gender, sampleID)]
dt_cancer
setcolorder(dt_cancer, c("gender","sampleID"))
dt_cancer
tb.shape <- copy(tb1)
tb.shape[, ":=" (
BRCA2=sample(40:6000,6),
ATM=sample(40:6000,6)) ]
tb.shape
melt(tb.shape, id.vars = c("sampleID", "cancer"),
measure.vars = c("BRCA2", "ATM"))
(tb1.m1  <- melt(tb.shape,
measure.vars = c("BRCA2", "ATM"),
variable.name = "genes",
value.name = "n_mutations")
)
dcast(tb1.m1, sampleID + cancer ~ genes, value.var = "n_mutations")
tb1.m
tb1.m1
tb1
tb.shape
tb1.m1[, ,]
tb1.m1[, mean(n_mutations), genes]
### -----------------
tb.shape[, ,]
### -----------------
tb.shape[, .(mean(BRCA2), mean(ATM))]
tb.shape
### -----------------
tb.shape[, lapply(.SD, mean), .SDcols=is.numeric]
### -----------------
tb.shape[, lapply(.SD, mean), .SDcols=is.numeric][-1]
### -----------------
tb.shape[, lapply(.SD, mean), .SDcols=is.numeric][-1,]
### -----------------
tb.shape[, lapply(.SD, mean), .SDcols=is.numeric][,-1]
tb.shape
### -----------------
tb.shape[, lapply(.SD, mean), .SDcols=BRCA2:ATM]
### -----------------
tb.shape[, lapply(.SD, mean), .SDcols=is.numeric]
head(mtcars)
?as.data.table
mtcars_dt
mtcars_dt <- as.data.table(mtcars, keep.rownames = "carnames")
mtcars_dt
## Using merge() -----------------
# Inner Join
merge(dt1, dt2, by="carnames") #if setkey was used prior then merge(tb1,tb2) works the same
dt1 <- mtcars_dt[5:25,.(carnames, mpg, cyl)]
dt2 <- mtcars_dt[1:10, .(carnames, gear)]
## Using merge() -----------------
# Inner Join
merge(dt1, dt2, by="carnames") #if setkey was used prior then merge(tb1,tb2) works the same
# Left Join
merge(dt1, dt2, by="carnames", all.x=TRUE)
# Full Join
merge(dt1, dt2, by="carnames", all=TRUE)
## Withouth merge() --------------------
setkey(dt1, carnames)
setkey(dt2, carnames)
# Left Join
dt2[dt1]
?merge
dt1 <- mtcars_dt[5:25,.(id=carnames, mpg, cyl)]
dt2 <- mtcars_dt[1:10, .(carnames, gear)]
dt1
dt2
#
merge(dt1, dt2, by="carnames")
dt1
dt2
dt1
dt2
#
merge(dt1, dt2, by.x="id", by.y="carnames")
#
merge(dt1, dt2, by.x="id", by.y="carnames")
mtcars_dt
dt1
setnames(dt1, "id", "carnames")
dt1
dcast(dt1, carnames ~ cyl, value.var = "mpg")
dcast(dt1, carnames ~ cyl, value.var = "mpg", fill = 0)
region_enhancer <- data.table(chr = c("chr1", "chr11", "chr17", "chr17"),
start=c(100, 108300000, 9200, 4390100),
end= c(900, 108301500, 9900, 4391000) )
location_gene <- data.table( gene = c("BRCA1", "ATM"),
chr = c("chr17", "chr11"),
start = c(43902857, 108230374),
end= c(43983996, 108376593)
)
region_enhancer; location_gene
# First we set the values
setkey(region_enhancer, chr, start, end)
setkey(location_gene, chr, start, end)
### Then we use foverlaps
foverlaps(region_enhancer, location_gene)
foverlaps(location_gene, region_enhancer)
### Then we use foverlaps
foverlaps(region_enhancer, location_gene)
3/4
mtcars_dt[]
bla <- as.data.table(bla)
library(data.table)
bla <- as.data.table(bla)
bla <- as.data.table(iris)
bla
bla[Petal.Length < 2 & Petal.Length >1,.N, Species]
head(table(bla$Species[bla$Sepal.Length > 0 & bla$Petal.Width < 10]))
head(table(bla[bla$Sepal.Length > 0 & bla$Petal.Width < 10, grp]))
head(table(bla[Sepal.Length > 0 & Petal.Width < 10, grp]))
bla[Sepal.Length > 0 & Petal.Width < 10, grp]
head(table(bla[Sepal.Length > 0 & Petal.Width < 10, Species]))
bla[,tapply(.SD,sum),.SDcols=c("Petal.Length")]
bla[sort(Petal.Length)]
bla[order(Petal.Length)]
bla[sort(Petal.Length)] %>% head()
library(magrittr)
bla[sort(Petal.Length)] %>% head()
bla[order(Petal.Length)] %>% head()
as.numeric(c("A", "B", "C"))
bla[,.(A=5, B=4)]
library(data.table)
students <- data.table(
Student = c("Alice", "Bob", "Charlie", "Diana", "Ethan"),
Math    = c("A", "B", "A", "C", "B"),
Science = c("B", "A", "B", "A", "C"),
English = c("A", "B", "C", "A", "B")
)
students
students[,ifelse(.SD=="A", .SD := 5,
ifelse(.SD == "B", .SD := 4,
.SD :=3
)
), Student]
bla[,as.numeric(Sepal.Length, Sepal.Width)]
library(tidyverse)
library(data.table)
library(gt)
## First specify the packages of interest
packages <- c("gt", "data.table",  "tidyverse")
## Install if missing, then load
lapply(packages, function(x) {
if (!requireNamespace(x, quietly = TRUE)) {
install.packages(x)
}
library(x, character.only = TRUE)
})
install.packages(x)
unloadNamespace('rlang')
install.packages('rlang')
## First specify the packages of interest
packages <- c("gt", "data.table",  "tidyverse")
## Install if missing, then load
lapply(packages, function(x) {
if (!requireNamespace(x, quietly = TRUE)) {
install.packages(x)
}
library(x, character.only = TRUE)
})
install.packages(x)
detach("package:rlang", unload = TRUE)
detach("package:rlang", unload = TRUE)
install.packages("rlang")
## First specify the packages of interest
packages <- c("gt", "data.table",  "tidyverse")
## Install if missing, then load
lapply(packages, function(x) {
if (!requireNamespace(x, quietly = TRUE)) {
install.packages(x)
}
library(x, character.only = TRUE)
})
install.packages(x)
