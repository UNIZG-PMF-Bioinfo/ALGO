install.packages("‘coronavirus’")
install.packages("coronavirus")
library("coronavirus")
coronavirus::covid19_vaccine
coronavirus::covid19_vaccine
data(package="coronavirus")
data(package="coronavirus")
coronavirus::coronavirus
bla <- as.data.table(coronavirus::coronavirus)
library(data.table)
bla
bla <- as.data.table(coronavirus::coronavirus)
bla
bla
bla[,.N,.(continent_code, continent_name )]
str(bla)
bla[type %in% c("confirmed", "death"),
.(cases = sum(cases, na.rm = TRUE)),
by = .(country, type)]
data.table)
# filter confirmed cases only
confirmed <- bla[type == "confirmed"]
# compute daily growth rate per country
growth <- confirmed[
order(country, date),                                    # order by country/date
.(daily_growth = cases - shift(cases, 1L, type = "lag")), # diff vs previous day
by = .(country)
]
# peak growth per country
peak_growth <- growth[, .(peak_growth = max(daily_growth, na.rm = TRUE)), by = country]
# top 5 countries with highest peak growth
top5 <- peak_growth[order(-peak_growth)][1:5]
top5
bla
bla
bla[date=="2020-01-22"]
bla[date=="2020-01-22" & country =="Canada"]
bla[date=="2020-01-22" & country =="Canada" & province=="Alberta"]
bla[country == "Canada" & province == "Alberta",
.(date, type, cases)]
bla[,.N,(type, Country, province)]
bla
bla[,.N,.(type, Country, province)]
bla[,.N, .(type, Country, province)]
bla[,.N, .(type, country, province)]
bla[,uniqueN(type), .(type, country, province)]
bla[,uniqueN(type), .(country, province)]
bla[,uniqueN(type), .(country, province)][V1 >2]
bla[country == "China" & province == "Beijing",
.(date, type, cases)]
bla[country == "China" & province == "Beijing",
.(date, type, cases)] %>%
.[,.SD[1],.(type)]
library(magrittr)
bla[country == "China" & province == "Beijing",
.(date, type, cases)] %>%
.[,.SD[1],.(type)]
bla[country == "China" & province == "Beijing",
.(date, type, cases)] %>%
.[order(date),.SD[1],.(type)]
bla[country == "China" & province == "Beijing",
.(date, type, cases)] %>%
.[cases != 0] %>%
.[order(date),.SD[1],.(type)]
bla[country == "China" & province == "Beijing",
.(date, type, cases)] %>%
.[cases != 0] %>%
.[order(date)] %>%
.[]
37+7+7
37+10
37+10+8
df <- data.frame(
id  = 1:5,
val = c("10", "20", "30", "40", "50"),   # numeric-looking but character
stringsAsFactors = FALSE
)
str(df)                 # shows val is character
sd(df$val)              # -> NA with warning: "argument is not numeric or logical: returning NA"
df
df2 <- data.frame(val = c("10", "20", "30", "NA", "bad"), stringsAsFactors = FALSE)
df
df2
df <- data.frame(
id  = 1:5,
height = c("160", "170", "175", "180", "165"),  # character
weight = c("55", "65", "70", "80", "60"),       # character
stringsAsFactors = FALSE
)
df
df <- data.frame(
id  = 1:5,
height = c("160", "170", "175", "180", "165"),  # character
weight = c("55", "65", "70", "80", "60"),       # character
stringsAsFactors = FALSE
)
df
DT <- data.table(
id = 1:5,
height = c("160","170","175","180","165"),
weight = c("55","65","70","80","60")
)
DT
DT <- data.table(
student = c("Alice","Bob","Cara"),
math    = c("A","C","B"),
science = c("B","B","A"),
english = c("A","D","C")
)
DT
setwd("C:/Users/Paula/Desktop/")
# 2) Load
library(Cardinal)
2+2
library(data.table)
library(data.table)
# Write the solution here
co2_dt <- as.data.table(Co2)
library(data.table)
# Write the solution here
co2_dt <- as.data.table(CO2)
co2_dt
co2_dt
# Write the solution here
co2_dt[,.(mean_uptake = mean(uptake)),.(Treatment)]
# Write the solution here
co2_dt[smalluptake %in% c(3.1, 4.1),.N]
co2_dt
# Write the solution here
co2_dt[uptake %in% c(3.1, 4.1),.N]
co2_dt
co2_dt[uptake == 3.1]
co2_dt
co2_dt[order(uptake)]
co2_dt[order(-uptake)]
# Write the solution here
co2_dt[, smalluptake := uptake/3]
# Write the solution here
co2_dt[uptake %in% c(3.1, 4.1),.N]
# Write the solution here
co2_dt[smalluptake %in% c(3.1, 4.1),.N]
co2_dt[smalluptake == 3.1]
# Write the solution here
co2_dt[smalluptake %in% c(3.1, 4.1),.N]
co2_dt[order(-smalluptake)]
co2_dt[smalluptake == 3.1]
co2_dt[order(smalluptake)]
# Write the solution here
co2_dt[, smalluptake := as.numeric(uptake/3)]
# Write the solution here
co2_dt[smalluptake %in% c(3.1, 4.1),.N]
# Write the solution here
co2_dt[, smalluptake := as.numeric(as.character(uptake/3))]
# Write the solution here
co2_dt[smalluptake %in% c(3.1, 4.1),.N]
# Write the solution here
co2_dt[, diffFromMeanUptake := uptake - mean(uptake), Treatment]
co2_dt
#prosjek za chilled
meanchilled<-mean(CO2$uptake[CO2$Treatment=="chilled"])  #var7h2
#prosjek za non chilled
meannonchilled<-mean(CO2$uptake[CO2$Treatment=="nonchilled"]) #var7h1
var7i <- CO2
#dodavanje novog stupca
var7i$diffFromMeanUptake <- NA
# nonchilled, uvjet je gdje je treatment nonchilled
nonchilleduvjet <- var7i$Treatment=="nonchilled"
var7i[nonchilleduvjet,"diffFromMeanUptake"] <- var7i[nonchilleduvjet,"uptake"] - meannonchilled
# chilled, uvjet je gdje je treatment chilled
chilleduvjet <- var7i$Treatment=="chilled"
var7i[chilleduvjet,"diffFromMeanUptake"] <- var7i[chilleduvjet, "uptake"] - meanchilled
var7i
var7i
4+4+3+17+7
4+4+3+8+7+16
4+4+3+8+7+16+1
flights
library(data.table)
( flights <- fread("https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv") )
iris_dt <- as.data.table(iris)
iris_dt[, .(row_id=.I), by=Species][c(1,51,101)]
iris_dt[, .(row_id=.GRP), by=Species][c(1,51,101)]
iris_dt[,.(row_di = 1:.N), Species]
iris_dt[,.(row_di = 1:.N), Species][c(1,51,101)]
iris_dt[,.(row_di = 1:.N), Species][c(1,51:52,101)]
iris_dt[,.(row_di = 1:.N), Species][,.SD[1], Species]
iris_dt[,.(row_di = 1:.N), Species][,.SD[1:2], Species]
iris_dt[, c("sepal_length_diff", "mean_diff") := {
mean_sepal_length <- mean(Sepal.Length)
diff_from_avg <- Sepal.Length - mean_sepal_length
list(round(diff_from_avg, 1), mean(diff_from_avg))
}, by = Species]
iris_dt
?seq_len
getwd()
# Write the solution here
iris_dt[Sepal.Length < 6.7 & Petal.Length < 1.2]
iris_dt <- as.data.table(iris)
library(data.table)
iris_dt <- as.data.table(iris)
# Write the solution here
iris_dt[Sepal.Length < 6.7 & Petal.Length < 1.2]
# Write the solution here
iris_dt[Species == "setosa" & Petal.Width > 0.3, ]
# Write the solution here
iris_dt[1:3, ]
# Write the solution here
iris_dt[1:3, c(3,4)]
iris_dt[1:3, .(Petal.Length, Petal.Width)]
iris_dt[1:3, c("Petal.Length", "Petal.Width")]
# samo jedan stupac
iris_dt[1:3, Petal.Length]
iris_dt[1:3]$Petal.Length
# stupac u data.table formatu
iris_dt[1:3, .(Petal.Length)]
iris_dt[Sepal.Width == 3 , .(Species, Sepal.Width) ]
vec_sel <- c("Species", "Sepal.Width")
iris_dt[Sepal.Width == 3 , ..vec_sel ]
iris_dt[Sepal.Length < 6.7]
iris_dt[Sepal.Length < 6.7][, mean(Petal.Width)]
# Write the solution here
iris_dt[Sepal.Length < 6.7, mean(Petal.Width)]
iris_dt[Sepal.Length < 6.7][Species=="virginica"][ mean(Petal.Width)]
iris_dt[Sepal.Length < 6.7][Species=="virginica"][,lapply(.SD, mean)]
iris_dt[Sepal.Length < 6.7][Species=="virginica"][ mean(Petal.Width)]
iris_dt[Sepal.Length < 6.7][Species=="virginica"][,lapply(.SD, mean)]
iris_dt[Sepal.Length < 6.7][Species=="virginica"][ mean(Petal.Width)]
# Write the solution here
iris_dt[, ":=" (meanPW = mean(Petal.Width),
sdPW = sd(Petal.Width)
),
Species
]
iris_dt
iris_dt
# Write the solution here
iris_dt[, uniqueN(meanPW)]
iris_dt[, uniqueN(meanPW), Species]
# Write the solution here
iris_dt[, uniqueN(meanPW)]
iris_dt[, uniqueN(meanPW), Species]
###
iris_dt[,.(.I), by=Species][c(1,51,101)]
iris_dt[, .(row_id = 1:.N),  Species][c(1,51,101)]
iris_dt[, .(row_id = 1:.N),  Species][c(1:2,51:52,101)]
iris_dt[, 1:.N]
iris_dt[, 1:.N, Species]
iris_dt[, .(1:.N), Species]
iris_dt[ Petal.Length < 6.5,  ":=" (
n_obs = .N,
row_id = .I,
grp_id = .GRP
), Species]
iris_dt
# Write the solution here
na.omit(iris_dt)
# Write the solution here
iris_dt_noNA <- na.omit(iris_dt)
iris_dt_noNA
## is.na()
iris_dt[is.na(row_id)]
## is.na()
iris_dt[!is.na(row_id)]
iris_dt[Species == "virginica"]
iris_dt[Species == "virginica", Species := "new_virginica"]
iris_dt[Species == "virginica"]
iris_dt[Species == "new_virginica"]
iris_dt[order(Petal.Width, decreasing = FALSE)]
iris_dt[order(Petal.Width, decreasing = FALSE),
.SD[1:3]
, by=Species]
, by=Species][, .(mean(Species),
, by=Species][, .(mean(Species),
iris_dt[order(Petal.Width, decreasing = FALSE),
.SD[1:3], by=Species][, .(mean(Species),
mean(Sepal.Length),
mean(Sepal.Width)
)]
iris_dt[order(Petal.Width, decreasing = FALSE),
.SD[1:3],
by=Species][, .(mean(Species),
mean(Sepal.Length),
mean(Sepal.Width)
)]
iris_dt[order(Petal.Width, decreasing = FALSE),
.SD[1:3],
by=Species][, lapply(.SD, mean),.SDcols=1:3]
# Write the solution here
iris_dt[order(Petal.Width, decreasing = FALSE),
.SD[1:3],
by=Species][, lapply(.SD, mean),.SDcols=is.numeric]
library("COVID19")
x <- covid19()
x
x[,.SD,.SDcols=patterns("[Cc]ountr")]
x[,.SD,.SDcols=patterns("ountr")]
x[,.SD,.SDcols=patterns("countr")]
setDT(x)
library(data.table)
setDT(x)
x[,.SD,.SDcols=patterns("countr")]
x
x <- covid19(country = c("Italy", "US"), level = 3)
x
x <- covid19()
setDT(x)
x
x[grepl("Bejing",key_apple_mobility)]
x[, c("id","country","province","date",
grep("vaccin|vaccine|people_vaccin|total_vaccin|daily_vaccin",
names(vax), ignore.case = TRUE, value = TRUE)),
with = FALSE]
x[, c("id","country","province","date",
grep("vaccin|vaccine|people_vaccin|total_vaccin|daily_vaccin",
names(x), ignore.case = TRUE, value = TRUE)),
with = FALSE]
x
str(x)
x
x[,uniqueN(iso_currency)]
x
ctry <- x[administrative_area_level == 1 & !is.na(iso_alpha_3)]
sub  <- x[administrative_area_level %in% 2:3]
ctry
pick a province/region name column that’s present at the most granular level available
uniqueN(ctry$administrative_area_level_1)
x[,uniqueN(iso_currency)]
x[,.(iso_currency, administrative_area_level_1)]
top_total_recovered <- sub[order(administrative_area_level_1, province, date),
tail(.SD, 1), by = .(administrative_area_level_1, province)
][order(-recovered)][1,
.(country  = administrative_area_level_1,
province, date, recovered)]
x
x
grepl("China", x$key_local, value=TRUE)
grep("China", x$key_local, value=TRUE)
library(‘coronavirus’)
library(coronavirus)
install.packages("‘coronavirus’")
install.packages("coronavirus")
coronavirus::coronavirus
coronavirus::coronavirus %>% head()
coronavirus::coronavirus
coronavirus::covid19_vaccine
coronavirus::covid19_vaccine
coronavirus::coronavirus
coronavirus::coronavirus[,uniqueN(country)]
covid_dt <- as.data.table(coronavirus::coronavirus)
covid_dt[,uniqueN(country)]
covid_dt
covid_dt[,.N,type]
covid_dt
covid_dt[,type == "recovery",.N,.(country, province)]
covid_dt[type == "recovery",.N,.(country, province)]
covid_dt[type == "recovery",.N,.(country, province)] %>%
.[order(-N)]
covid_dt[type == "recovery",.N,.(country, province)][order(-N)]
covid_dt
covid_dt[type == "recovery",sum(cases),.(country, province)][order(-N)]
covid_dt[type == "recovery",sum(cases),.(country, province)]
covid_dt[type == "recovery",sum(cases),.(country, province)][order(-V1)]
covid_dt
?coronavirus::coronavirus
covid_dt
