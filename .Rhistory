covid_dt
covid_dt[,uniqueN(country)]
covid_dt
covid_dt[type == "recovered", sum(cases), .(country, province)]
covid_dt
covid_dt[,.N, type]
covid_dt[type == "recovery", sum(cases), .(country, province)]
covid_dt[type == "recovery", sum(cases), .(country, province)][V1 == max(V1)]
covid_dt[type == "recovery", sum(cases), .(country, province)][!is.na(provinence)][V1 == max(V1)]
covid_dt[type == "recovery", sum(cases), .(country, province)][!is.na(province)][V1 == max(V1)]
covid_dt[cases == max(cases),.(country, province)]
covid_dt[cases == max(cases),.(country, province, cases)]
covid_dt[cases == max(cases) & !is.na(province),.(country, province, cases)]
covid_dt[cases == max(cases) & !is.na(province),.(country, province, cases)]
covid_dt[!is.na(province][cases == max(cases) ,.(country, province, cases)]
covid_dt[!is.na(province][cases == max(cases) ,.(country, province, cases)]
covid_dt[!is.na(province)][cases == max(cases) ,.(country, province, cases)]
covid_dt[cases == max(cases),.(country, province, cases)]
covid_dt[!is.na(province)][cases == max(cases) ,.(country, province, cases)]
covid_dt[type == "recovery", sum(cases), .(country, province)][V1 == max(V1)]
# if I want provinence (+1)
covid_dt[type == "recovery", sum(cases), .(country, province)][!is.na(province)][V1 == max(V1)]
covid_dt[cases == max(cases),.(country, province, cases)]
covid_dt[!is.na(province)][cases == max(cases) ,.(country, province, cases)]
covid_dt[cases == max(cases),.(country, province, cases)]
covid_dt[!is.na(province)][cases == max(cases) ,.(country, province, cases)]
covid_dt[!is.na(province)]
covid_dt
covid_dt[!is.na(province), .N, province]
covid_dt
covid_dt[!is.na(province), sum(cases), province] %>%
.][]
covid_dt[!is.na(province), sum(cases), province] %>%
.[]
library(magrittr)
covid_dt[!is.na(province), sum(cases), province] %>%
.[]
covid_dt
covid_dt[!is.na(province), .(sum(cases), population), province]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(V1/population), province]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(V1/population*100), province]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(round(V1/population*100, 2)), province]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(round(V1/population*100, 2), population), province]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(round(V1/population*100, 2), population), province] %>%
.[order(population)]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(round(V1/population*100, 2), population), province] %>%
.[order(-population)]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(round(V1/population*100, 2), population), province] %>%
.[order(-V1)]
covid_dt
covid_dt[type == "confirmed", .(cases - shift(cases)) , country]
covid_dt
covid_dt[type == "confirmed", .(cases - shift(cases)) , country]
covid_dt
covid_dt[type == "confirmed", .(cases - shift(cases)) , country] %>%
.[is.na(V1)]
covid_dt[type == "confirmed", .(cases - shift(cases)) , country]
covid_dt[type == "confirmed", .(cases - shift(cases)) , country] %>%
.[order(-V1)]
covid_dt[type == "confirmed", .(cases - shift(cases)) , country] %>%
.[order(-V1), .SD[1:5], country]
covid_dt[type == "confirmed", .(cases - shift(cases)) , country] %>%
.[order(-V1), country]
covid_dt[type == "confirmed", .(cases - shift(cases)) , country] %>%
.[order(-V1)]
covid_dt[type == "confirmed", .(cases - shift(cases)) , country] %>%
.[order(-V1)] %>%
.[1:5]
covid_dt[type == "confirmed", .( max(cases - shift(cases), na.rm = TRUE)) , country] %>%
.[order(-V1)] %>%
.[1:5]
covid_dt[type == "confirmed", .( max(cases - shift(cases), na.rm = TRUE)) , country]
covid_dt
covid_dt
covid_dt[country == "China" & province == "Beijing"]
covid_dt[country == "China" & province == "Beijing"] %>%
.[,.SD[1:2],type]
covid_dt[country == "China" & province == "Beijing"] %>%
.[order(date),.SD[1:2],type]
covid_dt[country == "China" & province == "Beijing"] %>%
.[order(-date),.SD[1:2],type]
covid_dt[country == "China" & province == "Beijing"] %>%
.[order(date),.SD[1:2],type]
covid_dt[country == "China" & province == "Beijing"] %>%
.[order(date)]
covid_dt[country == "China" & province == "Beijing"] %>%
.[order(date)] %>%
.[cases != 0]
covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
# Clean the 'type' names if needed (factor -> character)
long_cn[, type := c("confirmed","deaths","recovered")[as.integer(type)]]
covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
.[]
covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
.[order(date)]
covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
.[order(date)] %>% #just in case the table is in same order
.[, .(consec_id := rleid(type))] %>%
.[,.(consec_id, type, cases)]
covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
.[order(date)] %>% #just in case the table is in same order
.[, consec_id := rleid(type)] %>%
.[,.(consec_id, type, cases)]
covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
.[order(date)] %>% #just in case the table is in same order
.[, consec_id := rleid(type)] %>%
.[,.(consec_id, type, cases)] %>%
.[,.N,.(consec_id)] %>%
.[N==max(N)]
covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
.[order(date)] %>% #just in case the table is in same order
.[, consec_id := rleid(type)] %>%
.[,.(consec_id, type, cases)] %>%
.[,.N,.(consec_id)] %>%
.[N==max(N),]
covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
.[order(date)] %>% #just in case the table is in same order
.[, consec_id := rleid(type)] %>%
.[,.(consec_id, type, cases)] %>%
.[,.N,.(consec_id)]
covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
.[order(date)] %>% #just in case the table is in same order
.[, consec_id := rleid(type)] %>%
.[,.(consec_id, type, cases)] %>%
.[,.N,.(consec_id)] %>%
.[N==max(N)]
dt_g <- covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
.[order(date)] %>% #just in case the table is in same order
.[, consec_id := rleid(type)]
dt_g %>%
.[,.(consec_id, type, cases)] %>%
.[,.N,.(consec_id)] %>%
.[N==max(N)]
dt_g %>%
.[,.N,.(consec_id)] %>%
.[N==max(N)]
dt_g[consec_id=="252"]
covid_dt[cases == max(cases),.(country, province, cases)]
covid_dt[type == "recovery", sum(cases), .(country, province)][V1 == max(V1)]
# if I want provinence (+1)
covid_dt[type == "recovery", sum(cases), .(country, province)][!is.na(province)][V1 == max(V1)]
covid_dt[type == "recovery", sum(cases), .(country, province)][V1 == max(V1)]
# if I want provinence (+1)
covid_dt[type == "recovery", sum(cases), .(country, province)][!is.na(province)][V1 == max(V1)]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(round(V1/population*100, 2), population), province] %>%
.[order(-V1)]
covid_dt
covid_dt
covid_dt
# if I want provinence (+1)
covid_dt[type == "recovery", sum(cases), .(country, province)][!is.na(province)][V1 == max(V1)]
covid_dt[type == "recovery", sum(cases), .(country, province)][V1 == max(V1)]
# if I want provinence (+1)
covid_dt[type == "recovery", sum(cases), .(country, province)][!is.na(province)][V1 == max(V1)]
covid_dt[!is.na(province), .(sum(cases), population), province]
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique()
# by total population
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(round(V1/population*100, 2), population), province] %>%
.[order(-V1)]
covid_dt[type == "confirmed", .( max(cases - shift(cases), na.rm = TRUE)) , country] %>%
.[order(-V1)] %>%
.[1:5]
covid_dt[!is.na(province)][cases == max(cases) ,.(country, province, cases)]
covid_dt[cases == max(cases),.(country, province, cases)]
covid_dt[cases=="recovered"][cases == max(cases),.(country, province, cases)]
covid_dt[cases=="recovered"]
covid_dt[cases=="recovory"][cases == max(cases),.(country, province, cases)]
covid_dt
recovered[,.N,type]
covid_dt[,.N,type]
covid_dt[cases=="recovery "][cases == max(cases),.(country, province, cases)]
covid_dt[cases=="recovery"][cases == max(cases),.(country, province, cases)]
covid_dt[cases=="recovery"]
covid_dt[type=="recovery"][cases == max(cases),.(country, province, cases)]
# by total population
covid_dt[!is.na(province), .(sum(cases), population), province] %>%
unique() %>%
.[,.(round(V1/population*100, 2), population), province] %>%
.[order(-V1)]
covid_dt[type=="recovery"][cases == max(cases),.(country, province, cases)]
covid_dt[type=="recovery"][!is.na(province)][cases == max(cases) ,.(country, province, cases)]
covid_dt[type=="recovery"][cases == max(cases),.(country, province, cases)]
covid_dt[type=="recovery"][!is.na(province)][cases == max(cases) ,.(country, province, cases)]
# Example data
dt_grade <- data.table(
Student = c("Alice", "Bob", "Cara"),
Math = c("A", "A", "B"),
Science = c("C", "A", "B"),
English = c("C", "C", "B")
)
library(data.table)
##
change_grade <- function(x) {
if (x == "A") {
x <- 5
} else if (x == "B") {
x <- 4
} else{
x <- 3
}
return(as.numeric(x))
}
dt_grade
# Example data
dt_grade <- data.table(
Student = c("Alice", "Bob", "Cara"),
Math = c("A", "A", "B"),
Science = c("C", "A", "B"),
English = c("C", "C", "B")
)
##
change_grade <- function(x) {
if (x == "A") {
x <- 5
} else if (x == "B") {
x <- 4
} else{
x <- 3
}
return(as.numeric(x))
}
dt_grade
dt_grade[,lapply(.SD, change_grade), .SDcols=c("Math", "Science", "English")]
change_grade <- function(x) {
if (x == "A") {
x <- 5
} else if (x == "B") {
x <- 4
} else{
x <- 3
}
return(as.numeric(x))
}
dt_grade[,lapply(.SD, change_grade), .SDcols=c("Math", "Science", "English")]
dt_grade[,lapply(.SD, change_grade), .SDcols=grade_cols]
change_grade
dt_grade[, lapply(.SD, function(col) sapply(col, change_grade)), .SDcols = grade_cols]
grade_cols <- c("Math","Science","English")
dt_grade[,lapply(.SD, change_grade), .SDcols=grade_cols]
dt_grade[, lapply(.SD, function(col) sapply(col, change_grade)), .SDcols = grade_cols]
dt_grade[,lapply(.SD, as.numeric), .SDcols=grade_cols]
change_grade(dt_grade$Math)
dt_grade$Math
change_grade <- function(x) {
new_vec <- ifelse(x == "A", 5,
ifelse(x== "B", 4),
3
)
return(as.numeric(new_vec))
}
grade_cols <- c("Math","Science","English")
dt_grade[,lapply(.SD, change_grade), .SDcols=grade_cols]
change_grade <- function(x) {
new_vec <- ifelse(x == "A", 5,
ifelse(x == "B", 4,
ifelse(x == "C", 3, NA)))
as.numeric(new_vec)
}
grade_cols <- c("Math","Science","English")
dt_grade[,lapply(.SD, change_grade), .SDcols=grade_cols]
change_grade <- function(x) {
new_vec <- ifelse(x == "A", 5,
ifelse(x == "B", 4,
3))
as.numeric(new_vec)
}
grade_cols <- c("Math","Science","English")
dt_grade[, lapply(.SD, change_grade), .SDcols=grade_cols]
if (!requireNamespace("GEOquery", quietly = TRUE))
install.packages("GEOquery")
library(GEOquery)
# Download metadata (GSE130970)
gse <- getGEO("GSE130970", GSEMatrix = TRUE)
# Extract phenotype / sample metadata
pheno <- pData(gse[[1]])
# View metadata
head(pheno)
pheno
library(data.table)
setDT(pheno)
pheno
str(pheno)
View(pheno)
pheno[,.(characteristics_ch1.2)]
library(stringr)
pheno[,":="(age = str_extract(characteristics_ch1.2, "\\d+"))]
pheno
pheno$`age at biopsy:ch1` %>%
summary()
pheno[,":="(age = str_extract(characteristics_ch1.2, "\\d+") %>% as.numeric)]
pheno$age %>%
summary()
pheno$age %>%
summary()
library(ggplot2)
ggplot(pheno, aes(x=age)) +
geom_histogram()
library(GEOquery)
library(DESeq2)
gse <- getGEO("GSE130970", GSEMatrix=TRUE)[[1]]
expr <- exprs(gse)
meta <- pData(gse)
# Clean covariates
meta$stage <- factor(meta$fibrosis_stage, ordered=TRUE)
meta
meta$stage
colnames(meta)
# Install if necessary
if (!requireNamespace("GEOquery", quietly = TRUE))
install.packages("GEOquery")
library(GEOquery)
# Download metadata (GSE130970)
gse <- getGEO("GSE210077", GSEMatrix = TRUE)
# Extract phenotype / sample metadata
pheno <- pData(gse[[1]])
# View metadata
head(pheno)
library(data.table)
setDT(pheno)
pheno
View(pheno)
pheno[,.N, `age:ch1`]
library(ggplot2)
pheno[,.N, `age:ch1`] %>%
ggplot(., aes(y=N, x=`age:ch1`)) +
geom_col() +
theme_bw()
library(magrittr)
pheno[,.N, `age:ch1`] %>%
ggplot(., aes(y=N, x=`age:ch1`)) +
geom_col() +
theme_bw()
pheno[,.N, `age:ch1`] %>%
ggplot(., aes(y=N, x=`age:ch1`)) +
geom_col(fill="magenta4") +
theme_bw()
# Download metadata (GSE130970)
gse <- getGEO("GSE123658", GSEMatrix = TRUE)
# Extract phenotype / sample metadata
pheno <- pData(gse[[1]])
# View metadata
head(pheno)
setDT(pheno)
pheno[,.N, `age:ch1`] %>%
ggplot(., aes(y=N, x=`age:ch1`)) +
geom_col(fill="magenta4") +
theme_bw()
library(data.table)
## make a fancy function
change_grade <- function(x) {
new_vec <- ifelse(x == "A", 5,
ifelse(x == "B", 4, 3))
as.numeric(new_vec)
}
## create example data.table
dt_grade <- data.table(
Name = c("Alice", "Bob", "Charlie", "Diana"),
Math = c("A", "B", "C", "A"),
Science = c("B", "B", "A", "C"),
English = c("C", "A", "B", "B")
)
# original table
dt_grade
grade_cols <- c("Math", "Science", "English")
dt_grade[, lapply(.SD, change_grade), .SDcols = grade_cols]
change_grade <- function(x) {
as.numeric(fcase(
x == "A", 5,
x == "B", 4,
default = 3
))
}
dt_grade[, lapply(.SD, change_grade), .SDcols = grade_cols]
library(coronavirus)
covid_dt <- as.data.table(coronavirus::coronavirus)
dt_g[consec_id=="252"]
dt_g <- covid_dt[country == "China" & province == "Beijing"] %>%
.[cases != 0] %>%
.[order(date)] %>% #just in case the table is in same order
.[, consec_id := rleid(type)]
dt_g %>%
.[,.N,.(consec_id)] %>%
.[N==max(N)]
dt_g[consec_id=="252"]
dt_g
dt_g[,.(date, consec_id, type)]
dt_g[consec_id==max_cons_id, .SD[c(1,.N)]]
# find the maximum
max_cons_id <- dt_g %>%
.[,.N,.(consec_id)] %>%
.[N==max(N)]
dt_g[consec_id==max_cons_id, .SD[c(1,.N)]]
dt_g[consec_id==max_cons_id, .SD[c(1,.N)], .SDcols="date"]
dt_g[consec_id==max_cons_id]
max_cons_id
# find the maximum
max_cons_id <- dt_g %>%
.[,.N,.(consec_id)] %>%
.[N==max(N), consec_id]
dt_g[consec_id==max_cons_id, .SD[c(1,.N)], .SDcols="date"]
dt_g[consec_id==max_cons_id, .SD[c(1,.N)]]
dt_g[consec_id==max_cons_id, .SD[c(1,.N)], .SDcols="date"]
dt_g[consec_id==max_cons_id]
dt_g[consec_id==max_cons_id, .SD[c(1,.N)], .SDcols="date"]
dt_g[consec_id==max_cons_id]
covid_dt[country == "China" & province == "Beijing"] %>%
.[date %in% dt_g[consec_id==max_cons_id]$date]
covid_dt[country == "China" & province == "Beijing"] %>%
.[date %in% dt_g[consec_id==max_cons_id]$date] %>%
.[,.N,type]
covid_dt[country == "China" & province == "Beijing"] %>%
.[date %in% dt_g[consec_id==max_cons_id]$date] %>%
.[,.N,.(type, cases)]
covid_dt[country == "China" & province == "Beijing"] %>%
.[date %in% dt_g[consec_id==max_cons_id]$date] %>%
.[,.N,.(type, cases)] %>%
.[order(-N)]
covid_dt[country == "China" & province == "Beijing"] %>%
.[date %in% dt_g[consec_id==max_cons_id]$date] %>%
.[,.N,.(type, cases)] %>%
.[order(N)]
covid_dt[country == "China" & province == "Beijing"] %>%
.[date %in% dt_g[consec_id==max_cons_id]$date] %>%
.[,.N,.(type, cases)] %>%
.[order(cases)]
covid_dt[country == "China" & province == "Beijing"] %>%
.[date %in% dt_g[consec_id==max_cons_id]$date] %>%
.[order(cases),.N,.(type, cases)]
dt_g <- covid_dt[country == "China" & province == "Beijing"] %>%
# rm cases 0 to get the interval of consecutive
.[cases > 0] %>%
#just in case the table is in same order
.[order(date)] %>%
# add consecutive ID
.[, consec_id := rleid(type)]
## visulize the data
dt_g[,.(date, consec_id, type)]
# find the maximum
max_cons_id <- dt_g %>%
.[,.N,.(consec_id)] %>%
.[N==max(N), consec_id]
covid_dt[country == "China" & province == "Beijing"] %>%
.[date %in% dt_g[consec_id==max_cons_id]$date] %>%
.[order(cases),.N,.(type, cases)]
dt_g[consec_id==max_cons_id, .SD[c(1,.N)], .SDcols="date"]
## visulize the data
dt_g[,.(date, consec_id, type)]
dt_g <- covid_dt[country == "China" & province == "Beijing"] %>%
# rm cases 0 to get the interval of consecutive
.[cases > 0] %>%
#just in case the table is in same order
.[order(date)] %>%
# add consecutive ID
.[, consec_id := rleid(type)]
## visulize the data
dt_g[,.(date, consec_id, type)]
# find the maximum
max_cons_id <- dt_g %>%
.[,.N,.(consec_id)] %>%
.[N==max(N), consec_id]
dt_g[consec_id==max_cons_id, .SD[c(1,.N)], .SDcols="date"]
BiocManager::install("biomaRt")
library("biomaRt")
install.packages("dbplyr")
library("biomaRt")
listEnsembl(mirror = "useast", version = NULL)
biomaRt::listEnsembl(mirror = "useast", version = NULL)
biomaRt::listEnsembl()
listEnsembl()
?listEnsembl
ensembl <- useEnsembl(biomart = "genes")
searchDatasets(mart = ensembl, pattern = "hsapiens")
ensembl <- useDataset(dataset = "hsapiens_gene_ensembl", mart = ensembl)
ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
library("biomaRt")
listEnsembl()
ensembl <- useEnsembl(biomart = "genes")
searchDatasets(mart = ensembl, pattern = "hsapiens")
##
print(joined_ranges_tb)
